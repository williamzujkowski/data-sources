{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Data Sources Manager","text":"<p>A centralized, version\u2011controlled catalog of high\u2011quality data feeds for LLM\u2011based projects, with an initial focus on vulnerability research.</p>"},{"location":"#overview","title":"Overview","text":"<p>The Data Sources Manager streamlines source discovery, scoring, and consumption, enabling consistent, automated integration of reliable information into downstream workflows.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>Structured Metadata: Consistent JSON schema for tracking diverse source types</li> <li>Quality Scoring: Numeric scoring (0-100) based on freshness, authority, coverage, and availability</li> <li>User Preference Weights: Customize source priorities based on your needs</li> <li>Automated Updates: Daily fetching, scoring, and indexing via GitHub Actions</li> <li>Fast Lookups: Minimal-token lookups via lightweight SQLite index</li> </ul>"},{"location":"#quick-links","title":"Quick Links","text":"<ul> <li>Installation - Set up the Data Sources Manager</li> <li>Quick Start - Get started in minutes</li> <li>Data Sources - Browse available data sources</li> <li>Contributing - Add new data sources</li> </ul>"},{"location":"#project-structure","title":"Project Structure","text":"<pre><code>data-sources-manager/\n\u251c\u2500\u2500 data-sources/                # Data source metadata files\n\u2502   \u2514\u2500\u2500 vulnerability/           # Grouped by category\n\u2502       \u251c\u2500\u2500 cve/                 # Subcategories\n\u2502       \u2502   \u251c\u2500\u2500 nvd.json\n\u2502       \u2502   \u251c\u2500\u2500 vendor-advisory.json\n\u2502       \u2502   \u2514\u2500\u2500 \u2026\n\u2502       \u251c\u2500\u2500 exploit-db.json\n\u2502       \u2514\u2500\u2500 \u2026\n\u251c\u2500\u2500 schemas/                     # JSON schema definitions\n\u2502   \u251c\u2500\u2500 source.schema.json       # Source metadata schema\n\u2502   \u2514\u2500\u2500 quality.schema.json      # Quality scoring schema\n\u251c\u2500\u2500 config/                      # Configuration files\n\u2502   \u251c\u2500\u2500 categories.json          # Category definitions\n\u2502   \u2514\u2500\u2500 scoring-config.json      # Quality scoring weights\n\u251c\u2500\u2500 tools/                       # Python utilities\n\u2502   \u251c\u2500\u2500 fetch_sources.py         # Update source data\n\u2502   \u251c\u2500\u2500 score_sources.py         # Calculate quality scores\n\u2502   \u2514\u2500\u2500 index_sources.py         # Build search index\n\u2514\u2500\u2500 .github/workflows/           # CI/CD automation\n    \u251c\u2500\u2500 update-sources.yml       # Daily source updates\n    \u2514\u2500\u2500 lint-schemas.yml         # Schema validation\n</code></pre>"},{"location":"#license","title":"License","text":"<p>This project is available under the MIT License.</p>"},{"location":"API_KEYS/","title":"API Keys Documentation","text":"<p>This document provides information about the API keys used in this project, how to obtain them, and how to configure them.</p>"},{"location":"API_KEYS/#configuration","title":"Configuration","text":"<p>API keys should be stored in a <code>.env</code> file in the root directory of the project. This file is not committed to the repository for security reasons.</p> <p>Example <code>.env</code> file: <pre><code>NVD_API_KEY=your_nvd_api_key_here\nALIENVAULT_OTX_API_KEY=your_otx_api_key_here\nOPENAI_API_KEY=your_openai_api_key_here\nGOOGLE_API_KEY=your_google_api_key_here\n</code></pre></p>"},{"location":"API_KEYS/#api-key-sources","title":"API Key Sources","text":""},{"location":"API_KEYS/#national-vulnerability-database-nvd","title":"National Vulnerability Database (NVD)","text":"<ul> <li>Environment Variable: <code>NVD_API_KEY</code></li> <li>Purpose: Access NVD APIs with higher rate limits</li> <li>How to Obtain: </li> <li>Visit https://nvd.nist.gov/developers/request-an-api-key</li> <li>Fill out the form and submit</li> <li>You will receive the API key via email</li> </ul>"},{"location":"API_KEYS/#alienvault-open-threat-exchange-otx","title":"AlienVault Open Threat Exchange (OTX)","text":"<ul> <li>Environment Variable: <code>ALIENVAULT_OTX_API_KEY</code></li> <li>Purpose: Access OTX threat intelligence data</li> <li>How to Obtain: </li> <li>Create an account at https://otx.alienvault.com/</li> <li>Navigate to your profile settings</li> <li>Find the API key section</li> </ul>"},{"location":"API_KEYS/#openai","title":"OpenAI","text":"<ul> <li>Environment Variable: <code>OPENAI_API_KEY</code></li> <li>Purpose: Access to GPT models for generation tasks</li> <li>How to Obtain: </li> <li>Create an account at https://platform.openai.com/</li> <li>Navigate to API keys section: https://platform.openai.com/api-keys</li> <li>Generate a new API key</li> </ul>"},{"location":"API_KEYS/#google-gemini","title":"Google (Gemini)","text":"<ul> <li>Environment Variable: <code>GOOGLE_API_KEY</code></li> <li>Purpose: Access to Gemini models</li> <li>How to Obtain: </li> <li>Create or use an existing Google Cloud account</li> <li>Navigate to https://makersuite.google.com/app/apikey</li> <li>Create an API key</li> </ul>"},{"location":"API_KEYS/#validation","title":"Validation","text":"<p>You can validate your API keys using the <code>validate_api_keys.py</code> script:</p> <pre><code>python tools/validate_api_keys.py\n</code></pre> <p>This will check if your API keys are valid and have the necessary permissions.</p>"},{"location":"API_KEYS/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never commit your <code>.env</code> file or API keys to version control</li> <li>Rotate your API keys periodically</li> <li>Use API keys with the minimum necessary permissions</li> <li>For CI/CD pipelines, use GitHub Secrets instead of hardcoded values</li> </ol>"},{"location":"SECRETS_MANAGEMENT/","title":"Secrets Management Guide","text":"<p>This document outlines how API keys and other secrets are managed in the data-sources-manager project.</p>"},{"location":"SECRETS_MANAGEMENT/#local-development","title":"Local Development","text":"<p>For local development, secrets are stored in a <code>.env</code> file in the root directory. This file is not committed to the repository.</p> <p>Example <code>.env</code> file: <pre><code>NVD_API_KEY=your_nvd_api_key_here\nALIENVAULT_OTX_API_KEY=your_otx_api_key_here\nOPENAI_API_KEY=your_openai_api_key_here\nGOOGLE_API_KEY=your_google_api_key_here\n</code></pre></p>"},{"location":"SECRETS_MANAGEMENT/#validating-api-keys","title":"Validating API Keys","text":"<p>Use the included validation tool to verify your API keys are working:</p> <pre><code>python tools/validate_api_keys.py\n</code></pre>"},{"location":"SECRETS_MANAGEMENT/#cicd-environment","title":"CI/CD Environment","text":"<p>For GitHub Actions and other CI/CD environments, secrets should be stored as GitHub Secrets and accessed as environment variables.</p>"},{"location":"SECRETS_MANAGEMENT/#setting-up-github-secrets","title":"Setting up GitHub Secrets","text":"<ol> <li>Navigate to your repository on GitHub</li> <li>Go to Settings \u2192 Secrets and variables \u2192 Actions</li> <li>Click \"New repository secret\"</li> <li>Add each API key with the same name as in your local <code>.env</code> file</li> </ol>"},{"location":"SECRETS_MANAGEMENT/#using-secrets-in-github-actions","title":"Using Secrets in GitHub Actions","text":"<p>In your workflow files (<code>.github/workflows/*.yml</code>), you can access the secrets like this:</p> <pre><code>jobs:\n  update-sources:\n    runs-on: ubuntu-latest\n    env:\n      NVD_API_KEY: ${{ secrets.NVD_API_KEY }}\n      ALIENVAULT_OTX_API_KEY: ${{ secrets.ALIENVAULT_OTX_API_KEY }}\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run update\n        run: python tools/fetch_sources.py\n</code></pre>"},{"location":"SECRETS_MANAGEMENT/#adding-new-secrets","title":"Adding New Secrets","text":"<p>When adding new API keys or other secrets:</p> <ol> <li>Update the <code>.env.sample</code> file with the new variable name (but not the value)</li> <li>Add validation in <code>tools/validate_api_keys.py</code> if appropriate</li> <li>Update the documentation in <code>docs/API_KEYS.md</code></li> <li>Add the secret to GitHub Secrets for CI/CD workflows</li> </ol>"},{"location":"SECRETS_MANAGEMENT/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never commit secrets to the repository</li> <li>Rotate API keys periodically</li> <li>Use least privilege when creating API keys</li> <li>Audit access to secrets regularly</li> <li>Revoke compromised keys immediately</li> </ol>"},{"location":"SECRETS_MANAGEMENT/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with API keys:</p> <ol> <li>Verify the key is correctly copied (no extra spaces or characters)</li> <li>Run the validation tool to check if the key is valid</li> <li>Check the API provider's documentation for any rate limits or restrictions</li> <li>Regenerate the key if necessary</li> </ol>"},{"location":"github-pages-setup/","title":"GitHub Pages Setup Instructions","text":"<p>To properly display the MkDocs documentation on GitHub Pages, please follow these steps:</p> <ol> <li> <p>Go to your repository's Settings tab on GitHub.</p> </li> <li> <p>In the left sidebar, click on \"Pages\" under \"Code and automation\".</p> </li> <li> <p>Under \"Build and deployment\", set the following:</p> </li> <li>Source: \"Deploy from a branch\"</li> <li>Branch: \"gh-pages\" (select this from the dropdown)</li> <li> <p>Folder: \"/\" (root)</p> </li> <li> <p>Click \"Save\".</p> </li> </ol> <p>After completing these steps, GitHub Pages will automatically deploy your documentation from the gh-pages branch whenever it's updated by the GitHub Actions workflow.</p>"},{"location":"github-pages-setup/#how-it-works","title":"How It Works","text":"<p>The GitHub Actions workflow (<code>publish-docs.yml</code>) does the following:</p> <ol> <li> <p>It triggers when changes are pushed to the <code>docs/</code> directory or <code>mkdocs.yml</code> file on the main branch.</p> </li> <li> <p>It builds the MkDocs site using the configuration in mkdocs.yml.</p> </li> <li> <p>It uses the JamesIves/github-pages-deploy-action to deploy the built site to the gh-pages branch.</p> </li> <li> <p>GitHub Pages then serves the content from the gh-pages branch.</p> </li> </ol>"},{"location":"github-pages-setup/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with the GitHub Pages deployment:</p> <ol> <li> <p>Check the GitHub Actions workflow run to see if there were any errors during the build or deployment.</p> </li> <li> <p>Verify that the gh-pages branch exists and contains the built documentation.</p> </li> <li> <p>Ensure that GitHub Pages is configured to deploy from the gh-pages branch.</p> </li> <li> <p>Check if the repository has the necessary permissions for GitHub Actions to push to the gh-pages branch.</p> </li> </ol>"},{"location":"api/python-tools/","title":"Python Tools API","text":"<p>The Data Sources Manager includes several Python tools that can be used programmatically in your own code. This page documents the key functions and classes in these tools.</p>"},{"location":"api/python-tools/#fetch_sourcespy","title":"fetch_sources.py","text":"<p>The <code>fetch_sources.py</code> module is responsible for fetching data from sources and updating metadata.</p>"},{"location":"api/python-tools/#key-functions","title":"Key Functions","text":""},{"location":"api/python-tools/#load_source_files","title":"<code>load_source_files()</code>","text":"<p>Loads all source metadata files from the <code>data-sources/</code> directory.</p> <pre><code>from tools.fetch_sources import load_source_files\n\n# Load all sources\nsources = load_source_files()\nprint(f\"Loaded {len(sources)} sources\")\n</code></pre>"},{"location":"api/python-tools/#fetch_source_healthsource","title":"<code>fetch_source_health(source)</code>","text":"<p>Checks if a source is available and returns health metrics.</p> <pre><code>from tools.fetch_sources import fetch_source_health\n\n# Check health of a source\nsource = {\"url\": \"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.json.gz\"}\nhealth = fetch_source_health(source)\nprint(f\"Source available: {health['available']}\")\nprint(f\"Status code: {health['status_code']}\")\nprint(f\"Response time: {health['response_time']}s\")\n</code></pre>"},{"location":"api/python-tools/#update_source_metadatasource-health","title":"<code>update_source_metadata(source, health)</code>","text":"<p>Updates the source metadata with health check results and current timestamp.</p> <pre><code>from tools.fetch_sources import update_source_metadata\n\n# Update source metadata\nsource = {\"id\": \"nvd-cve\", \"availability\": 90}\nhealth = {\"available\": True, \"status_code\": 200, \"response_time\": 0.5}\nupdated_source = update_source_metadata(source, health)\nprint(f\"Updated last_updated: {updated_source['last_updated']}\")\n</code></pre>"},{"location":"api/python-tools/#score_sourcespy","title":"score_sources.py","text":"<p>The <code>score_sources.py</code> module is responsible for calculating quality scores for data sources.</p>"},{"location":"api/python-tools/#key-functions_1","title":"Key Functions","text":""},{"location":"api/python-tools/#load_scoring_config","title":"<code>load_scoring_config()</code>","text":"<p>Loads scoring configuration from the config file.</p> <pre><code>from tools.score_sources import load_scoring_config\n\n# Load scoring config\nconfig = load_scoring_config()\nweights = config.get(\"weights\", {})\nprint(f\"Freshness weight: {weights.get('freshness')}\")\n</code></pre>"},{"location":"api/python-tools/#calculate_freshness_scorelast_updated_str","title":"<code>calculate_freshness_score(last_updated_str)</code>","text":"<p>Calculates freshness score based on last update date.</p> <pre><code>from tools.score_sources import calculate_freshness_score\n\n# Calculate freshness score\nfreshness = calculate_freshness_score(\"2025-04-15T00:00:00Z\")\nprint(f\"Freshness score: {freshness}\")\n</code></pre>"},{"location":"api/python-tools/#calculate_quality_scoresource-weights","title":"<code>calculate_quality_score(source, weights)</code>","text":"<p>Calculates overall quality score based on component metrics and weights.</p> <pre><code>from tools.score_sources import calculate_quality_score\n\n# Calculate quality score\nsource = {\n    \"last_updated\": \"2025-04-15T00:00:00Z\",\n    \"authority\": 90,\n    \"coverage\": 85,\n    \"availability\": 95\n}\nweights = {\n    \"freshness\": 0.4,\n    \"authority\": 0.3,\n    \"coverage\": 0.2,\n    \"availability\": 0.1\n}\nquality_score = calculate_quality_score(source, weights)\nprint(f\"Quality score: {quality_score}\")\n</code></pre>"},{"location":"api/python-tools/#index_sourcespy","title":"index_sources.py","text":"<p>The <code>index_sources.py</code> module is responsible for building the search index.</p>"},{"location":"api/python-tools/#key-functions_2","title":"Key Functions","text":""},{"location":"api/python-tools/#build_category_indexsources","title":"<code>build_category_index(sources)</code>","text":"<p>Builds an index of sources by category.</p> <pre><code>from tools.index_sources import build_category_index\n\n# Build category index\nsources = [\n    {\"id\": \"nvd-cve\", \"category\": \"vulnerability\"},\n    {\"id\": \"exploit-db\", \"category\": \"vulnerability\"}\n]\ncategory_index = build_category_index(sources)\nprint(f\"Vulnerability sources: {category_index.get('vulnerability', [])}\")\n</code></pre>"},{"location":"api/python-tools/#build_tag_indexsources","title":"<code>build_tag_index(sources)</code>","text":"<p>Builds an index of sources by tag.</p> <pre><code>from tools.index_sources import build_tag_index\n\n# Build tag index\nsources = [\n    {\"id\": \"nvd-cve\", \"tags\": [\"official\", \"government\"]},\n    {\"id\": \"exploit-db\", \"tags\": [\"exploit\", \"security\"]}\n]\ntag_index = build_tag_index(sources)\nprint(f\"Official sources: {tag_index.get('official', [])}\")\nprint(f\"Security sources: {tag_index.get('security', [])}\")\n</code></pre>"},{"location":"api/python-tools/#build_source_lookupsources","title":"<code>build_source_lookup(sources)</code>","text":"<p>Builds a lookup dictionary for source details by ID.</p> <pre><code>from tools.index_sources import build_source_lookup\n\n# Build source lookup\nsources = [\n    {\n        \"id\": \"nvd-cve\",\n        \"name\": \"National Vulnerability Database\",\n        \"url\": \"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.json.gz\",\n        \"category\": \"vulnerability\",\n        \"format\": \"json\",\n        \"quality_score\": 95,\n        \"last_updated\": \"2025-04-22T00:00:00Z\"\n    }\n]\nsource_lookup = build_source_lookup(sources)\nprint(f\"NVD details: {source_lookup.get('nvd-cve')}\")\n</code></pre>"},{"location":"api/python-tools/#validate_sourcespy","title":"validate_sources.py","text":"<p>The <code>validate_sources.py</code> module is responsible for validating source files against the schema.</p>"},{"location":"api/python-tools/#usage-example","title":"Usage Example","text":"<pre><code>import json\nimport jsonschema\nfrom pathlib import Path\n\n# Load schema\nschema_path = Path(\"schemas/source.schema.json\")\nwith open(schema_path, \"r\") as f:\n    schema = json.load(f)\n\n# Validate a source file\nsource_path = Path(\"data-sources/vulnerability/cve/nvd.json\")\nwith open(source_path, \"r\") as f:\n    source = json.load(f)\n\ntry:\n    jsonschema.validate(source, schema)\n    print(f\"{source_path} is valid\")\nexcept jsonschema.exceptions.ValidationError as e:\n    print(f\"{source_path} is invalid: {e}\")\n</code></pre>"},{"location":"api/python-tools/#validate_api_keyspy","title":"validate_api_keys.py","text":"<p>The <code>validate_api_keys.py</code> module is responsible for validating API keys against services.</p>"},{"location":"api/python-tools/#key-functions_3","title":"Key Functions","text":""},{"location":"api/python-tools/#validate_nvd_api_key","title":"<code>validate_nvd_api_key()</code>","text":"<p>Validates the NVD API key.</p> <pre><code>from tools.validate_api_keys import validate_nvd_api_key\n\n# Validate NVD API key\nvalid = validate_nvd_api_key()\nprint(f\"NVD API key is valid: {valid}\")\n</code></pre>"},{"location":"api/python-tools/#validate_otx_api_key","title":"<code>validate_otx_api_key()</code>","text":"<p>Validates the AlienVault OTX API key.</p> <pre><code>from tools.validate_api_keys import validate_otx_api_key\n\n# Validate OTX API key\nvalid = validate_otx_api_key()\nprint(f\"OTX API key is valid: {valid}\")\n</code></pre>"},{"location":"api/python-tools/#full-example","title":"Full Example","text":"<p>Here's a complete example that combines multiple tools:</p> <pre><code>from tools.fetch_sources import load_source_files\nfrom tools.score_sources import calculate_quality_score, load_scoring_config\nfrom tools.index_sources import build_category_index, build_source_lookup\n\n# Load sources and config\nsources = load_source_files()\nconfig = load_scoring_config()\nweights = config.get(\"weights\", {})\n\n# Recalculate quality scores\nfor source in sources:\n    source[\"quality_score\"] = calculate_quality_score(source, weights)\n\n# Build indices\ncategory_index = build_category_index(sources)\nsource_lookup = build_source_lookup(sources)\n\n# Find high-quality vulnerability sources\nvulnerability_sources = category_index.get(\"vulnerability\", [])\nhigh_quality_sources = []\n\nfor source_id in vulnerability_sources:\n    source = source_lookup.get(source_id)\n    if source and source.get(\"quality_score\", 0) &gt;= 90:\n        high_quality_sources.append(source)\n\n# Print results\nprint(f\"Found {len(high_quality_sources)} high-quality vulnerability sources:\")\nfor source in high_quality_sources:\n    print(f\"- {source['name']} (Quality: {source['quality_score']})\")\n</code></pre>"},{"location":"api/quality-schema/","title":"Quality Schema","text":"<p>The <code>quality.schema.json</code> defines the structure for quality scoring attributes. This schema ensures consistency in how quality scores are calculated across all data sources.</p>"},{"location":"api/quality-schema/#schema-definition","title":"Schema Definition","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Quality Scoring Attributes\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"freshness\":    { \"type\": \"number\", \"description\": \"days since last update\" },\n    \"authority\":    { \"type\": \"number\", \"description\": \"0\u2013100 credibility\" },\n    \"coverage\":     { \"type\": \"number\", \"description\": \"0\u2013100 scope of data\" },\n    \"availability\": { \"type\": \"number\", \"description\": \"0\u2013100 uptime/reliability\" },\n    \"user_preference_weight\": {\n      \"type\": \"object\",\n      \"properties\": {\n        \"freshness\":    { \"type\": \"number\" },\n        \"authority\":    { \"type\": \"number\" },\n        \"coverage\":     { \"type\": \"number\" },\n        \"availability\": { \"type\": \"number\" }\n      },\n      \"additionalProperties\": false\n    }\n  },\n  \"required\": [\"freshness\",\"authority\",\"coverage\",\"availability\"]\n}\n</code></pre>"},{"location":"api/quality-schema/#properties","title":"Properties","text":"Property Type Required Description <code>freshness</code> number Yes Measure of how recently the source was updated (days since last update) <code>authority</code> number (0-100) Yes Credibility rating of the source <code>coverage</code> number (0-100) Yes How comprehensive the source's data coverage is <code>availability</code> number (0-100) Yes Reliability and uptime of the source <code>user_preference_weight</code> object No User-specific weights for calculating custom scores"},{"location":"api/quality-schema/#user-preference-weight-properties","title":"User Preference Weight Properties","text":"Property Type Required Description <code>freshness</code> number No User-defined weight for freshness <code>authority</code> number No User-defined weight for authority <code>coverage</code> number No User-defined weight for coverage <code>availability</code> number No User-defined weight for availability"},{"location":"api/quality-schema/#quality-score-calculation","title":"Quality Score Calculation","text":"<p>The overall quality score is calculated using these attributes with the following formula:</p> <pre><code>quality_score = (freshness * 0.4) + (authority * 0.3) + (coverage * 0.2) + (availability * 0.1)\n</code></pre> <p>When user preference weights are available, the formula becomes:</p> <pre><code>user_weighted_score = (freshness * user_weight.freshness) + \n                      (authority * user_weight.authority) + \n                      (coverage * user_weight.coverage) + \n                      (availability * user_weight.availability)\n</code></pre> <p>Where the user weights are normalized to sum to 1.0.</p>"},{"location":"api/quality-schema/#example-quality-attributes","title":"Example Quality Attributes","text":"<pre><code>{\n  \"freshness\": 95,\n  \"authority\": 90,\n  \"coverage\": 85,\n  \"availability\": 95,\n  \"user_preference_weight\": {\n    \"freshness\": 0.5,\n    \"authority\": 0.3,\n    \"coverage\": 0.1,\n    \"availability\": 0.1\n  }\n}\n</code></pre>"},{"location":"api/quality-schema/#usage","title":"Usage","text":""},{"location":"api/quality-schema/#scoring-sources","title":"Scoring Sources","text":"<p>The <code>score_sources.py</code> tool uses this schema to calculate quality scores:</p> <pre><code>python tools/score_sources.py\n</code></pre>"},{"location":"api/quality-schema/#customizing-user-weights","title":"Customizing User Weights","text":"<p>You can customize the user preference weights in your data source files to prioritize certain attributes:</p> <pre><code>\"user_preference_weight\": {\n  \"freshness\": 0.6,    // Prioritize freshness\n  \"authority\": 0.2,\n  \"coverage\": 0.1,\n  \"availability\": 0.1\n}\n</code></pre> <p>This will result in a custom <code>user_weighted_score</code> that emphasizes freshness more than the default weighting.</p>"},{"location":"api/quality-schema/#related-schemas","title":"Related Schemas","text":"<ul> <li>Source Schema - Defines the structure for data source metadata</li> </ul>"},{"location":"api/source-schema/","title":"Source Schema","text":"<p>The <code>source.schema.json</code> defines the structure for data source metadata files. This schema ensures consistency across all data sources in the repository.</p>"},{"location":"api/source-schema/#schema-definition","title":"Schema Definition","text":"<pre><code>{\n  \"$schema\": \"http://json-schema.org/draft-07/schema#\",\n  \"title\": \"Data Source Metadata\",\n  \"type\": \"object\",\n  \"properties\": {\n    \"id\":              { \"type\": \"string\" },\n    \"name\":            { \"type\": \"string\" },\n    \"url\":             { \"type\": \"string\", \"format\": \"uri\" },\n    \"description\":     { \"type\": \"string\" },\n    \"category\":        { \"type\": \"string\" },\n    \"sub_category\":    { \"type\": \"string\" },\n    \"format\":          { \"type\": \"string\", \"enum\": [\"json\",\"csv\",\"rss\",\"xml\",\"other\"] },\n    \"tags\":            { \"type\": \"array\", \"items\": { \"type\": \"string\" } },\n    \"quality_score\":   { \"type\": \"number\", \"minimum\": 0, \"maximum\": 100, \"description\": \"Calculated quality score based on various metrics\" },\n    \"user_weighted_score\": { \"type\": [\"number\", \"null\"], \"minimum\": 0, \"maximum\": 100, \"description\": \"Quality score adjusted by user-defined weights (optional)\" },\n    \"last_updated\":    { \"type\": \"string\", \"format\": \"date-time\", \"description\": \"Timestamp of the last update check or data fetch (ISO 8601 format)\" },\n    \"freshness\":       { \"type\": [\"number\", \"null\"], \"minimum\": 0, \"maximum\": 100, \"description\": \"Score indicating how recently the source was updated (optional)\" },\n    \"authority\":       { \"type\": [\"number\", \"null\"], \"minimum\": 0, \"maximum\": 100, \"description\": \"Score indicating the credibility/trustworthiness of the source (optional)\" },\n    \"coverage\":        { \"type\": [\"number\", \"null\"], \"minimum\": 0, \"maximum\": 100, \"description\": \"Score indicating the scope or completeness of the data (optional)\" },\n    \"availability\":    { \"type\": [\"number\", \"null\"], \"minimum\": 0, \"maximum\": 100, \"description\": \"Score indicating the uptime/reliability of the source (optional)\" },\n    \"update_frequency\":{ \"type\": [\"string\", \"null\"], \"description\": \"How often the source is typically updated (e.g., Daily, Hourly, Weekly) (optional)\" },\n    \"api_details\":     { \n      \"type\": [\"object\", \"null\"],\n      \"properties\": {\n        \"requires_auth\": { \"type\": \"boolean\" },\n        \"documentation\": { \"type\": \"string\", \"format\": \"uri\" }\n      },\n      \"additionalProperties\": false,\n      \"description\": \"Details about accessing the source via API (optional)\"\n    },\n    \"data_format_sample\": {\n      \"type\": [\"object\", \"null\"],\n      \"description\": \"An example snippet of the data provided by the source (optional)\",\n      \"additionalProperties\": true \n    }\n  },\n  \"required\": [\"id\",\"name\",\"url\",\"category\",\"format\",\"quality_score\",\"last_updated\"],\n  \"additionalProperties\": false\n}\n</code></pre>"},{"location":"api/source-schema/#properties","title":"Properties","text":"Property Type Required Description <code>id</code> string Yes Unique identifier for the data source <code>name</code> string Yes Human-readable name of the data source <code>url</code> string (URI) Yes URL to access the data source <code>description</code> string No Description of what the data source provides <code>category</code> string Yes Primary category (e.g., \"vulnerability\") <code>sub_category</code> string No Subcategory for more specific classification <code>format</code> string (enum) Yes Format of the data (json, csv, rss, xml, other) <code>tags</code> array of strings No List of tags for additional classification <code>quality_score</code> number (0-100) Yes Calculated quality score based on various metrics <code>user_weighted_score</code> number (0-100) or null No Quality score adjusted by user-defined weights (optional) <code>last_updated</code> string (date-time) Yes Timestamp of the last update check or data fetch (ISO 8601 format) <code>freshness</code> number (0-100) or null No Score indicating how recently the source was updated (optional) <code>authority</code> number (0-100) or null No Score indicating the credibility/trustworthiness of the source (optional) <code>coverage</code> number (0-100) or null No Score indicating the scope or completeness of the data (optional) <code>availability</code> number (0-100) or null No Score indicating the uptime/reliability of the source (optional) <code>update_frequency</code> string or null No How often the source is typically updated (e.g., Daily, Hourly, Weekly) (optional) <code>api_details</code> object or null No Details about accessing the source via API (optional) <code>api_details.requires_auth</code> boolean No Whether API access requires authentication <code>api_details.documentation</code> string (URI) No URL to the API documentation <code>data_format_sample</code> object or null No An example snippet of the data provided by the source (optional)"},{"location":"api/source-schema/#example-source-file","title":"Example Source File","text":"<pre><code>{\n  \"id\": \"nvd-cve\",\n  \"name\": \"National Vulnerability Database\",\n  \"url\": \"https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.json.gz\",\n  \"description\": \"NIST National Vulnerability Database CVE feed\",\n  \"category\": \"vulnerability\",\n  \"sub_category\": \"cve\",\n  \"format\": \"json\",\n  \"tags\": [\"official\", \"government\", \"security\"],\n  \"quality_score\": 95,\n  \"user_weighted_score\": 95,\n  \"last_updated\": \"2025-04-22T00:00:00Z\"\n}\n</code></pre>"},{"location":"api/source-schema/#usage","title":"Usage","text":""},{"location":"api/source-schema/#validating-against-schema","title":"Validating Against Schema","text":"<p>You can validate a source file against the schema using the <code>jsonschema</code> Python package:</p> <pre><code>jsonschema -i data-sources/vulnerability/cve/nvd.json schemas/source.schema.json\n</code></pre> <p>Or using the provided validation tool:</p> <pre><code>python tools/validate_sources.py\n</code></pre>"},{"location":"api/source-schema/#creating-new-source-files","title":"Creating New Source Files","text":"<p>When creating a new source file, make sure it follows the schema:</p> <ol> <li>Use a unique <code>id</code> that describes the source</li> <li>Provide a clear <code>name</code> and <code>description</code></li> <li>Include the correct <code>url</code> to access the data</li> <li>Specify the appropriate <code>category</code> and <code>format</code></li> <li>Set an initial <code>quality_score</code> based on your assessment</li> <li>Set the <code>last_updated</code> timestamp to the current time</li> </ol> <p>The <code>score_sources.py</code> tool will recalculate the quality score based on the current data.</p>"},{"location":"api/source-schema/#related-schemas","title":"Related Schemas","text":"<ul> <li>Quality Schema - Defines the structure for quality scoring attributes</li> </ul>"},{"location":"development/api-keys/","title":"API Keys Documentation","text":"<p>This document provides information about the API keys used in this project, how to obtain them, and how to configure them.</p>"},{"location":"development/api-keys/#configuration","title":"Configuration","text":"<p>API keys should be stored in a <code>.env</code> file in the root directory of the project. This file is not committed to the repository for security reasons.</p> <p>Example <code>.env</code> file: <pre><code>NVD_API_KEY=your_nvd_api_key_here\nALIENVAULT_OTX_API_KEY=your_otx_api_key_here\nOPENAI_API_KEY=your_openai_api_key_here\nGOOGLE_API_KEY=your_google_api_key_here\n</code></pre></p>"},{"location":"development/api-keys/#api-key-sources","title":"API Key Sources","text":""},{"location":"development/api-keys/#national-vulnerability-database-nvd","title":"National Vulnerability Database (NVD)","text":"<ul> <li>Environment Variable: <code>NVD_API_KEY</code></li> <li>Purpose: Access NVD APIs with higher rate limits</li> <li>How to Obtain: </li> <li>Visit https://nvd.nist.gov/developers/request-an-api-key</li> <li>Fill out the form and submit</li> <li>You will receive the API key via email</li> </ul>"},{"location":"development/api-keys/#alienvault-open-threat-exchange-otx","title":"AlienVault Open Threat Exchange (OTX)","text":"<ul> <li>Environment Variable: <code>ALIENVAULT_OTX_API_KEY</code></li> <li>Purpose: Access OTX threat intelligence data</li> <li>How to Obtain: </li> <li>Create an account at https://otx.alienvault.com/</li> <li>Navigate to your profile settings</li> <li>Find the API key section</li> </ul>"},{"location":"development/api-keys/#openai","title":"OpenAI","text":"<ul> <li>Environment Variable: <code>OPENAI_API_KEY</code></li> <li>Purpose: Access to GPT models for generation tasks</li> <li>How to Obtain: </li> <li>Create an account at https://platform.openai.com/</li> <li>Navigate to API keys section: https://platform.openai.com/api-keys</li> <li>Generate a new API key</li> </ul>"},{"location":"development/api-keys/#google-gemini","title":"Google (Gemini)","text":"<ul> <li>Environment Variable: <code>GOOGLE_API_KEY</code></li> <li>Purpose: Access to Gemini models</li> <li>How to Obtain: </li> <li>Create or use an existing Google Cloud account</li> <li>Navigate to https://makersuite.google.com/app/apikey</li> <li>Create an API key</li> </ul>"},{"location":"development/api-keys/#validation","title":"Validation","text":"<p>You can validate your API keys using the <code>validate_api_keys.py</code> script:</p> <pre><code>python tools/validate_api_keys.py\n</code></pre> <p>This will check if your API keys are valid and have the necessary permissions.</p>"},{"location":"development/api-keys/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never commit your <code>.env</code> file or API keys to version control</li> <li>Rotate your API keys periodically</li> <li>Use API keys with the minimum necessary permissions</li> <li>For CI/CD pipelines, use GitHub Secrets instead of hardcoded values</li> </ol>"},{"location":"development/architecture/","title":"Architecture","text":"<p>This document describes the overall architecture of the Data Sources Manager, explaining how the different components work together.</p>"},{"location":"development/architecture/#system-overview","title":"System Overview","text":"<p>The Data Sources Manager is designed as a simple yet efficient system for tracking, scoring, and querying data sources. It consists of the following main components:</p> <ol> <li>Data Source Metadata: JSON files that describe each data source</li> <li>Schemas: JSON Schema definitions that enforce consistency</li> <li>Configuration: Settings for categories, scoring weights, etc.</li> <li>Tools: Python scripts for fetching, scoring, and indexing</li> <li>Search Index: SQLite-based index for efficient queries</li> <li>Documentation: Comprehensive guides and references</li> </ol>"},{"location":"development/architecture/#component-architecture","title":"Component Architecture","text":""},{"location":"development/architecture/#data-flow-diagram","title":"Data Flow Diagram","text":"<pre><code>+----------------+     +----------------+     +----------------+\n| Data Sources   |     | Fetch Sources  |     | Source Health  |\n| JSON Files     | --&gt; | Python Tool    | --&gt; | Metrics        |\n+----------------+     +----------------+     +----------------+\n        |                      |                     |\n        v                      v                     v\n+----------------+     +----------------+     +----------------+\n| Score Sources  |     | Index Sources  |     | Search Index   |\n| Python Tool    | --&gt; | Python Tool    | --&gt; | (SQLite)       |\n+----------------+     +----------------+     +----------------+\n        ^                      ^                     |\n        |                      |                     v\n+----------------+     +----------------+     +----------------+\n| Configuration  |     | Schemas        |     | Query API      |\n| JSON Files     |     | JSON Schema    |     | (Python)       |\n+----------------+     +----------------+     +----------------+\n</code></pre>"},{"location":"development/architecture/#directory-structure","title":"Directory Structure","text":"<pre><code>data-sources-manager/\n\u251c\u2500\u2500 data-sources/                # Data source metadata files\n\u2502   \u2514\u2500\u2500 vulnerability/           # Grouped by category\n\u2502       \u251c\u2500\u2500 cve/                 # Subcategories\n\u2502       \u2502   \u251c\u2500\u2500 nvd.json\n\u2502       \u2502   \u251c\u2500\u2500 vendor-advisory.json\n\u2502       \u2502   \u2514\u2500\u2500 \u2026\n\u2502       \u251c\u2500\u2500 exploit-db.json\n\u2502       \u2514\u2500\u2500 \u2026\n\u251c\u2500\u2500 schemas/                     # JSON schema definitions\n\u2502   \u251c\u2500\u2500 source.schema.json       # Source metadata schema\n\u2502   \u2514\u2500\u2500 quality.schema.json      # Quality scoring schema\n\u251c\u2500\u2500 config/                      # Configuration files\n\u2502   \u251c\u2500\u2500 categories.json          # Category definitions\n\u2502   \u2514\u2500\u2500 scoring-config.json      # Quality scoring weights\n\u251c\u2500\u2500 tools/                       # Python utilities\n\u2502   \u251c\u2500\u2500 fetch_sources.py         # Update source data\n\u2502   \u251c\u2500\u2500 score_sources.py         # Calculate quality scores\n\u2502   \u2514\u2500\u2500 index_sources.py         # Build search index\n\u251c\u2500\u2500 docs/                        # Documentation\n\u2502   \u251c\u2500\u2500 index.md                 # Home page\n\u2502   \u251c\u2500\u2500 getting-started/         # Getting started guides\n\u2502   \u251c\u2500\u2500 usage/                   # Usage guides\n\u2502   \u2514\u2500\u2500 api/                     # API references\n\u2514\u2500\u2500 .github/workflows/           # CI/CD automation\n    \u251c\u2500\u2500 update-sources.yml       # Daily source updates\n    \u2514\u2500\u2500 lint-schemas.yml         # Schema validation\n</code></pre>"},{"location":"development/architecture/#key-components","title":"Key Components","text":""},{"location":"development/architecture/#1-data-source-metadata","title":"1. Data Source Metadata","text":"<p>Each data source is represented by a JSON file that follows the <code>source.schema.json</code> schema. These files contain metadata about the source, including:</p> <ul> <li>Basic information (ID, name, URL, description)</li> <li>Categorization (category, sub-category, tags)</li> <li>Quality metrics (quality_score, last_updated)</li> <li>Format and other attributes</li> </ul>"},{"location":"development/architecture/#2-json-schemas","title":"2. JSON Schemas","text":"<p>The system uses JSON Schema to enforce consistency across all data source files:</p> <ul> <li><code>source.schema.json</code>: Defines the structure for data source metadata</li> <li><code>quality.schema.json</code>: Defines the structure for quality scoring attributes</li> </ul>"},{"location":"development/architecture/#3-configuration","title":"3. Configuration","text":"<p>Configuration files in the <code>config/</code> directory control various aspects of the system:</p> <ul> <li><code>categories.json</code>: Defines categories and tags for organizing sources</li> <li><code>scoring-config.json</code>: Sets weights for quality scoring and update schedules</li> </ul>"},{"location":"development/architecture/#4-python-tools","title":"4. Python Tools","text":"<p>The system includes several Python tools for managing data sources:</p> <ul> <li><code>fetch_sources.py</code>: Fetches data from sources and updates metadata</li> <li><code>score_sources.py</code>: Calculates quality scores based on freshness, authority, etc.</li> <li><code>index_sources.py</code>: Builds a search index for efficient queries</li> <li><code>validate_sources.py</code>: Validates source files against the schemas</li> <li><code>validate_api_keys.py</code>: Validates API keys for external services</li> </ul>"},{"location":"development/architecture/#5-search-index","title":"5. Search Index","text":"<p>The search index is a SQLite database (<code>index.db</code>) that provides fast access to sources based on various criteria:</p> <ul> <li><code>category_index</code>: Sources organized by category</li> <li><code>tag_index</code>: Sources organized by tag</li> <li><code>format_index</code>: Sources organized by format</li> <li><code>quality_index</code>: Sources organized by quality buckets</li> <li><code>source_lookup</code>: Detailed information for each source by ID</li> </ul>"},{"location":"development/architecture/#6-cicd-automation","title":"6. CI/CD Automation","text":"<p>GitHub Actions workflows automate various tasks:</p> <ul> <li><code>update-sources.yml</code>: Runs daily to fetch the latest data, update quality scores, and rebuild the index</li> <li><code>lint-schemas.yml</code>: Validates the JSON schemas on every push and pull request</li> </ul>"},{"location":"development/architecture/#data-flow","title":"Data Flow","text":"<p>The typical data flow in the system is as follows:</p> <ol> <li>Source Addition: A contributor adds a new data source JSON file</li> <li>Validation: The file is validated against the schema</li> <li>Fetching: The <code>fetch_sources.py</code> tool checks the source's health and updates metadata</li> <li>Scoring: The <code>score_sources.py</code> tool calculates quality scores based on freshness, authority, etc.</li> <li>Indexing: The <code>index_sources.py</code> tool builds the search index</li> <li>Querying: Users query the search index to find relevant sources</li> </ol>"},{"location":"development/architecture/#design-principles","title":"Design Principles","text":"<p>The Data Sources Manager follows these design principles:</p> <ol> <li>Simplicity: Simple file-based storage with minimal dependencies</li> <li>Consistency: Strict schema validation to ensure data quality</li> <li>Modularity: Separate tools for different functions</li> <li>Efficiency: Optimized search index for fast queries</li> <li>Extensibility: Easy to add new sources and categories</li> <li>Automation: Automated updates and validation</li> </ol>"},{"location":"development/architecture/#future-enhancements","title":"Future Enhancements","text":"<p>Potential future enhancements to the architecture include:</p> <ol> <li>API Server: A REST API for remote access to the data</li> <li>Web Interface: A web-based UI for browsing and managing sources</li> <li>Analytics: Advanced analytics on source quality and usage</li> <li>Notification System: Alerts for source changes or problems</li> <li>Integration: Direct integration with downstream systems</li> </ol>"},{"location":"development/architecture/#conclusion","title":"Conclusion","text":"<p>The Data Sources Manager's architecture is designed to be simple, flexible, and efficient, making it easy to track, score, and query data sources for LLM-based projects.</p>"},{"location":"development/contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to the Data Sources Manager! This document provides guidelines for adding new data sources, updating existing ones, and contributing to the codebase.</p>"},{"location":"development/contributing/#deprecated-sources-rule","title":"Deprecated Sources Rule","text":"<p>If a data source is no longer useful, do not delete its metadata file. Instead, set <code>\"quality_score\": 0</code> and update <code>\"last_updated\"</code> to mark it retired.</p> <p>This ensures that previously used sources remain in the history and helps avoid re-adding deprecated sources.</p>"},{"location":"development/contributing/#adding-new-data-sources","title":"Adding New Data Sources","text":"<ol> <li>Identify the appropriate category for your data source in the <code>data-sources/</code> directory.</li> <li>Create a new JSON file following the naming convention <code>source-name.json</code>.</li> <li>Use the following template for your source metadata:</li> </ol> <pre><code>{\n  \"id\": \"unique-source-id\",\n  \"name\": \"Human-Readable Source Name\",\n  \"url\": \"https://example.com/data-feed\",\n  \"description\": \"Concise description of what this source provides\",\n  \"category\": \"vulnerability\",\n  \"sub_category\": \"cve\",\n  \"format\": \"json\",\n  \"tags\": [\"tag1\", \"tag2\", \"tag3\"],\n  \"quality_score\": 80,\n  \"last_updated\": \"2025-04-22T00:00:00Z\",\n  \"freshness\": 0,\n  \"authority\": 85,\n  \"coverage\": 75,\n  \"availability\": 90\n}\n</code></pre> <ol> <li>Validate your JSON file against the schema using the commands:    <pre><code>python tools/validate_sources.py\n</code></pre></li> </ol>"},{"location":"development/contributing/#updating-existing-sources","title":"Updating Existing Sources","text":"<ol> <li>Locate the source file you want to update.</li> <li>Make your changes, ensuring they follow the schema.</li> <li>Update the <code>last_updated</code> field with the current date-time.</li> <li>Adjust quality metrics if necessary.</li> <li>Validate your changes against the schema.</li> </ol>"},{"location":"development/contributing/#scoring-guide","title":"Scoring Guide","text":"<p>Source quality is measured using these metrics:</p> <ul> <li>Freshness: How frequently the source is updated (0-100)</li> <li>Authority: Credibility of the source (0-100)</li> <li>Coverage: Comprehensiveness of the data (0-100)</li> <li>Availability: Reliability and uptime (0-100)</li> </ul> <p>The overall <code>quality_score</code> is calculated as: <pre><code>quality_score = (freshness * 0.4) + (authority * 0.3) + (coverage * 0.2) + (availability * 0.1)\n</code></pre></p>"},{"location":"development/contributing/#contribution-process","title":"Contribution Process","text":"<ol> <li>Fork the repository.</li> <li>Create a feature branch for your contribution.</li> <li>Make your changes following the guidelines above.</li> <li>Run tests to ensure everything works:    <pre><code># Validate sources\npython tools/validate_sources.py\n</code></pre></li> <li>Submit a pull request with a clear description of your changes.</li> </ol>"},{"location":"development/contributing/#pr-checklist","title":"PR Checklist","text":"<ul> <li> Source metadata follows the schema</li> <li> JSON files are valid and properly formatted</li> <li> <code>last_updated</code> field reflects the current date</li> <li> Quality scores are justified with appropriate metrics</li> <li> Documentation updated if applicable</li> </ul>"},{"location":"development/contributing/#development-setup","title":"Development Setup","text":"<pre><code># Create and activate virtual environment\npython -m venv venv\nsource venv/bin/activate  # On Windows: venv\\Scripts\\activate\n\n# Install dependencies\npip install -r tools/requirements.txt\n\n# Optional: Install development tools\npip install black flake8 pytest\n</code></pre>"},{"location":"development/contributing/#documentation","title":"Documentation","text":"<p>If you're adding a new feature or making significant changes, please update the documentation:</p> <ol> <li>Update the relevant Markdown files in the <code>docs/</code> directory</li> <li>Preview the changes locally:    <pre><code>mkdocs serve\n</code></pre></li> <li>Include documentation changes in your pull request</li> </ol> <p>Thank you for contributing to the Data Sources Manager!</p>"},{"location":"development/secrets-management/","title":"Secrets Management Guide","text":"<p>This document outlines how API keys and other secrets are managed in the data-sources-manager project.</p>"},{"location":"development/secrets-management/#local-development","title":"Local Development","text":"<p>For local development, secrets are stored in a <code>.env</code> file in the root directory. This file is not committed to the repository.</p> <p>Example <code>.env</code> file: <pre><code>NVD_API_KEY=your_nvd_api_key_here\nALIENVAULT_OTX_API_KEY=your_otx_api_key_here\nOPENAI_API_KEY=your_openai_api_key_here\nGOOGLE_API_KEY=your_google_api_key_here\n</code></pre></p>"},{"location":"development/secrets-management/#validating-api-keys","title":"Validating API Keys","text":"<p>Use the included validation tool to verify your API keys are working:</p> <pre><code>python tools/validate_api_keys.py\n</code></pre>"},{"location":"development/secrets-management/#cicd-environment","title":"CI/CD Environment","text":"<p>For GitHub Actions and other CI/CD environments, secrets should be stored as GitHub Secrets and accessed as environment variables.</p>"},{"location":"development/secrets-management/#setting-up-github-secrets","title":"Setting up GitHub Secrets","text":"<ol> <li>Navigate to your repository on GitHub</li> <li>Go to Settings \u2192 Secrets and variables \u2192 Actions</li> <li>Click \"New repository secret\"</li> <li>Add each API key with the same name as in your local <code>.env</code> file</li> </ol>"},{"location":"development/secrets-management/#using-secrets-in-github-actions","title":"Using Secrets in GitHub Actions","text":"<p>In your workflow files (<code>.github/workflows/*.yml</code>), you can access the secrets like this:</p> <pre><code>jobs:\n  update-sources:\n    runs-on: ubuntu-latest\n    env:\n      NVD_API_KEY: ${{ secrets.NVD_API_KEY }}\n      ALIENVAULT_OTX_API_KEY: ${{ secrets.ALIENVAULT_OTX_API_KEY }}\n    steps:\n      - uses: actions/checkout@v3\n      - name: Run update\n        run: python tools/fetch_sources.py\n</code></pre>"},{"location":"development/secrets-management/#adding-new-secrets","title":"Adding New Secrets","text":"<p>When adding new API keys or other secrets:</p> <ol> <li>Update the <code>.env.sample</code> file with the new variable name (but not the value)</li> <li>Add validation in <code>tools/validate_api_keys.py</code> if appropriate</li> <li>Update the documentation in <code>docs/API_KEYS.md</code></li> <li>Add the secret to GitHub Secrets for CI/CD workflows</li> </ol>"},{"location":"development/secrets-management/#security-best-practices","title":"Security Best Practices","text":"<ol> <li>Never commit secrets to the repository</li> <li>Rotate API keys periodically</li> <li>Use least privilege when creating API keys</li> <li>Audit access to secrets regularly</li> <li>Revoke compromised keys immediately</li> </ol>"},{"location":"development/secrets-management/#troubleshooting","title":"Troubleshooting","text":"<p>If you encounter issues with API keys:</p> <ol> <li>Verify the key is correctly copied (no extra spaces or characters)</li> <li>Run the validation tool to check if the key is valid</li> <li>Check the API provider's documentation for any rate limits or restrictions</li> <li>Regenerate the key if necessary</li> </ol>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>The Data Sources Manager can be configured to suit your specific needs. This guide explains the available configuration options.</p>"},{"location":"getting-started/configuration/#configuration-files","title":"Configuration Files","text":"<p>The main configuration files are located in the <code>config/</code> directory:</p>"},{"location":"getting-started/configuration/#categoriesjson","title":"categories.json","text":"<p>This file defines the categories and tags for organizing data sources:</p> <pre><code>{\n  \"vulnerability\": [\"cve\",\"nvd\",\"exploit-db\",\"vendor-advisory\"],\n  \"technology_tags\": [\"web\",\"container\",\"cloud\",\"network\",\"host\"]\n}\n</code></pre> <p>You can modify this file to add new categories or tags as needed.</p>"},{"location":"getting-started/configuration/#scoring-configjson","title":"scoring-config.json","text":"<p>This file defines the weights used for calculating quality scores:</p> <pre><code>{\n  \"weights\": {\n    \"freshness\":    0.4,\n    \"authority\":    0.3,\n    \"coverage\":     0.2,\n    \"availability\": 0.1\n  },\n  \"update_schedule\": {\n    \"daily\":  true,\n    \"weekly\": false\n  }\n}\n</code></pre> <ul> <li>The <code>weights</code> section determines how much each factor contributes to the overall quality score.</li> <li>The <code>update_schedule</code> section controls how often sources are updated.</li> </ul>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>For features that require API access to external data sources, you can configure API keys in a <code>.env</code> file:</p> <pre><code>NVD_API_KEY=your_nvd_api_key_here\nALIENVAULT_OTX_API_KEY=your_otx_api_key_here\n</code></pre> <p>See the API Keys documentation for more details on obtaining and configuring these keys.</p>"},{"location":"getting-started/configuration/#user-preference-weights","title":"User Preference Weights","text":"<p>Each data source can have user-specific preference weights that override the global weights:</p> <pre><code>{\n  \"user_preference_weight\": {\n    \"freshness\": 0.5,\n    \"authority\": 0.3,\n    \"coverage\": 0.1,\n    \"availability\": 0.1\n  }\n}\n</code></pre> <p>This allows you to prioritize sources based on your specific needs.</p>"},{"location":"getting-started/configuration/#update-automation","title":"Update Automation","text":"<p>The repository includes GitHub Actions workflows for automating updates:</p>"},{"location":"getting-started/configuration/#update-sourcesyml","title":"update-sources.yml","text":"<p>This workflow runs daily to fetch the latest data, update quality scores, and rebuild the index:</p> <pre><code>name: \"Update Data Sources\"\non:\n  schedule:\n    - cron: \"0 2 * * *\"\n</code></pre> <p>You can modify the schedule to run at a different time or frequency.</p>"},{"location":"getting-started/configuration/#lint-schemasyml","title":"lint-schemas.yml","text":"<p>This workflow validates the JSON schemas on every push and pull request:</p> <pre><code>name: \"Validate JSON Schemas\"\non: [push, pull_request]\n</code></pre> <p>This helps ensure that all changes to the schemas are valid.</p>"},{"location":"getting-started/configuration/#customization","title":"Customization","text":"<p>To customize the Data Sources Manager:</p> <ol> <li>Fork the repository</li> <li>Modify the configuration files</li> <li>Add your own data sources</li> <li>Update the weights to match your priorities</li> </ol> <p>The system is designed to be flexible and extensible, so you can adapt it to your specific use case.</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This guide will help you set up the Data Sources Manager locally.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.8 or higher</li> <li>Git</li> <li>pip (Python package installer)</li> </ul>"},{"location":"getting-started/installation/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/williamzujkowski/data-sources.git\ncd data-sources\n</code></pre>"},{"location":"getting-started/installation/#set-up-a-virtual-environment","title":"Set Up a Virtual Environment","text":"<p>It's recommended to use a virtual environment to isolate dependencies:</p> <pre><code># Create a virtual environment\npython -m venv venv\n\n# Activate the virtual environment\n# On Windows:\nvenv\\Scripts\\activate\n# On macOS/Linux:\nsource venv/bin/activate\n</code></pre>"},{"location":"getting-started/installation/#install-dependencies","title":"Install Dependencies","text":"<pre><code>pip install -r tools/requirements.txt\n</code></pre>"},{"location":"getting-started/installation/#configure-api-keys-optional","title":"Configure API Keys (Optional)","text":"<p>For features that require API access to external data sources:</p> <ol> <li> <p>Copy the sample environment file:    <pre><code>cp .env.sample .env\n</code></pre></p> </li> <li> <p>Edit <code>.env</code> to add your API keys:    <pre><code># Open in your favorite editor\nnano .env\n</code></pre></p> </li> <li> <p>Validate your API keys:    <pre><code>python tools/validate_api_keys.py\n</code></pre></p> </li> </ol>"},{"location":"getting-started/installation/#running-the-tools","title":"Running the Tools","text":"<p>Once installed, you can run the various tools:</p> <pre><code># Fetch latest data from sources\npython tools/fetch_sources.py\n\n# Calculate quality scores\npython tools/score_sources.py\n\n# Build the search index\npython tools/index_sources.py\n</code></pre>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<ul> <li>Quick Start Guide - Learn how to use the Data Sources Manager</li> <li>Configuration - Customize the Data Sources Manager</li> <li>API Keys - Learn about obtaining and configuring API keys</li> </ul>"},{"location":"getting-started/quickstart/","title":"Quick Start","text":"<p>This guide will help you get started with the Data Sources Manager quickly.</p>"},{"location":"getting-started/quickstart/#basic-usage","title":"Basic Usage","text":"<p>Once you've installed the Data Sources Manager, you can start using it right away.</p>"},{"location":"getting-started/quickstart/#browsing-available-sources","title":"Browsing Available Sources","text":"<p>All data sources are stored as JSON files in the <code>data-sources/</code> directory, organized by category and subcategory. You can browse these files directly or use the provided tools to query them.</p>"},{"location":"getting-started/quickstart/#using-the-search-index","title":"Using the Search Index","text":"<p>The repository maintains a lightweight SQLite index for efficient lookups. Here's a simple example of how to use it:</p> <pre><code>from sqlitedict import SqliteDict\n\n# Open the index\nwith SqliteDict(\"index.db\") as db:\n    # List all sources in a specific category\n    vulnerability_sources = db[\"category_index\"].get(\"vulnerability\", [])\n\n    # Look up sources by tag\n    cloud_sources = db[\"tag_index\"].get(\"cloud\", [])\n\n    # Get high-quality sources\n    excellent_sources = db[\"quality_index\"].get(\"excellent\", [])\n\n    # Get details for a specific source\n    nvd_details = db[\"source_lookup\"].get(\"nvd-cve\")\n</code></pre>"},{"location":"getting-started/quickstart/#common-tasks","title":"Common Tasks","text":""},{"location":"getting-started/quickstart/#updating-data-sources","title":"Updating Data Sources","text":"<p>To fetch the latest data from all sources:</p> <pre><code>python tools/fetch_sources.py\n</code></pre>"},{"location":"getting-started/quickstart/#recalculating-quality-scores","title":"Recalculating Quality Scores","text":"<p>To update quality scores based on freshness, authority, and other metrics:</p> <pre><code>python tools/score_sources.py\n</code></pre>"},{"location":"getting-started/quickstart/#rebuilding-the-search-index","title":"Rebuilding the Search Index","text":"<p>To rebuild the search index after adding or modifying sources:</p> <pre><code>python tools/index_sources.py\n</code></pre>"},{"location":"getting-started/quickstart/#validating-source-files","title":"Validating Source Files","text":"<p>To validate all source files against the JSON schema:</p> <pre><code>python tools/validate_sources.py\n</code></pre>"},{"location":"getting-started/quickstart/#working-with-specific-categories","title":"Working with Specific Categories","text":""},{"location":"getting-started/quickstart/#vulnerability-data","title":"Vulnerability Data","text":"<p>The repository includes various vulnerability data sources:</p> <pre><code>from sqlitedict import SqliteDict\n\nwith SqliteDict(\"index.db\") as db:\n    # Get all vulnerability sources\n    vuln_sources = db[\"category_index\"].get(\"vulnerability\", [])\n\n    # Get NVD details\n    nvd = db[\"source_lookup\"].get(\"nvd-cve\")\n\n    # Print NVD URL\n    print(f\"NVD Feed URL: {nvd['url']}\")\n</code></pre>"},{"location":"getting-started/quickstart/#next-steps","title":"Next Steps","text":"<ul> <li>Configuration - Learn how to configure the Data Sources Manager</li> <li>Data Sources - See the complete list of available data sources</li> <li>Scoring - Understand how quality scoring works</li> </ul>"},{"location":"usage/data-sources/","title":"Data Sources","text":"<p>This page provides details about the available data sources in the repository.</p>"},{"location":"usage/data-sources/#vulnerability-data-sources","title":"Vulnerability Data Sources","text":""},{"location":"usage/data-sources/#national-vulnerability-database-nvd","title":"National Vulnerability Database (NVD)","text":"<ul> <li>ID: <code>nvd-cve</code></li> <li>URL: https://nvd.nist.gov/feeds/json/cve/1.1/nvdcve-1.1-recent.json.gz</li> <li>Description: NIST National Vulnerability Database CVE feed</li> <li>Category: vulnerability</li> <li>Sub-category: cve</li> <li>Format: json</li> <li>Quality Score: 95</li> </ul> <p>The National Vulnerability Database (NVD) is the U.S. government repository of standards-based vulnerability management data. It includes databases of security checklist references, security-related software flaws, misconfigurations, product names, and impact metrics.</p>"},{"location":"usage/data-sources/#mitre-common-vulnerabilities-and-exposures-cve","title":"MITRE Common Vulnerabilities and Exposures (CVE)","text":"<ul> <li>ID: <code>mitre-cve</code></li> <li>URL: https://cve.mitre.org/data/downloads/</li> <li>Description: Official CVE dictionary and standard identification method for publicly known cybersecurity vulnerabilities</li> <li>Category: vulnerability</li> <li>Sub-category: cve</li> <li>Format: xml</li> <li>Quality Score: 95</li> </ul> <p>The MITRE CVE database is the authoritative source for CVE identifiers, providing a standardized identifier for known cybersecurity vulnerabilities.</p>"},{"location":"usage/data-sources/#alienvault-open-threat-exchange-otx","title":"AlienVault Open Threat Exchange (OTX)","text":"<ul> <li>ID: <code>alienvault-otx</code></li> <li>URL: https://otx.alienvault.com/api</li> <li>Description: Crowd-sourced threat intelligence sharing platform with real-time threat data</li> <li>Category: vulnerability</li> <li>Sub-category: threat-intelligence</li> <li>Format: json</li> <li>Quality Score: 85</li> </ul> <p>AlienVault OTX provides a community platform for sharing threat intelligence data, including indicators of compromise (IOCs) related to vulnerabilities.</p>"},{"location":"usage/data-sources/#zero-day-initiative-zdi","title":"Zero Day Initiative (ZDI)","text":"<ul> <li>ID: <code>zero-day-initiative</code></li> <li>URL: https://www.zerodayinitiative.com/advisories/published/</li> <li>Description: Vulnerability acquisition program that procures zero-day vulnerabilities from security researchers</li> <li>Category: vulnerability</li> <li>Sub-category: advisory</li> <li>Format: rss</li> <li>Quality Score: 90</li> </ul> <p>The Zero Day Initiative is a program for rewarding security researchers for responsibly disclosing vulnerabilities, providing early warning of zero-day vulnerabilities.</p>"},{"location":"usage/data-sources/#cert-coordination-center-vulnerability-notes","title":"CERT Coordination Center Vulnerability Notes","text":"<ul> <li>ID: <code>cert-vn</code></li> <li>URL: https://www.kb.cert.org/vuls/</li> <li>Description: Technical documents describing vulnerabilities, their impact, and mitigations from Carnegie Mellon University's CERT/CC</li> <li>Category: vulnerability</li> <li>Sub-category: advisory</li> <li>Format: json</li> <li>Quality Score: 85</li> </ul> <p>The CERT Coordination Center produces vulnerability notes for selected vulnerabilities to provide accurate, neutral technical information.</p>"},{"location":"usage/data-sources/#exploit-database","title":"Exploit Database","text":"<ul> <li>ID: <code>exploit-db</code></li> <li>URL: https://www.exploit-db.com/search?type=json</li> <li>Description: Archive of publicly disclosed security vulnerabilities and exploits</li> <li>Category: vulnerability</li> <li>Sub-category: exploit</li> <li>Format: json</li> <li>Quality Score: 90</li> </ul> <p>The Exploit Database is a repository of public exploits and vulnerable software, maintained by Offensive Security.</p>"},{"location":"usage/data-sources/#vuldb-vulnerability-database","title":"VulDB Vulnerability Database","text":"<ul> <li>ID: <code>vuldb</code></li> <li>URL: https://vuldb.com/</li> <li>Description: Independent and comprehensive vulnerability database documenting, explaining and rating vulnerabilities</li> <li>Category: vulnerability</li> <li>Sub-category: database</li> <li>Format: json</li> <li>Quality Score: 80</li> </ul> <p>VulDB is a commercial vulnerability database with detailed information about vulnerabilities and affected products.</p>"},{"location":"usage/data-sources/#sans-internet-storm-center","title":"SANS Internet Storm Center","text":"<ul> <li>ID: <code>sans-isc</code></li> <li>URL: https://isc.sans.edu/api/</li> <li>Description: Cooperative cybersecurity monitoring system with daily reports on emerging threats and vulnerabilities</li> <li>Category: vulnerability</li> <li>Sub-category: threat-intelligence</li> <li>Format: json</li> <li>Quality Score: 85</li> </ul> <p>The SANS Internet Storm Center provides early warning of emerging threats and vulnerabilities.</p>"},{"location":"usage/data-sources/#cisa-known-exploited-vulnerabilities-catalog","title":"CISA Known Exploited Vulnerabilities Catalog","text":"<ul> <li>ID: <code>cisa-kev</code></li> <li>URL: https://www.cisa.gov/known-exploited-vulnerabilities-catalog</li> <li>Description: CISA's authoritative source of vulnerabilities that have been actively exploited in the wild</li> <li>Category: vulnerability</li> <li>Sub-category: exploited</li> <li>Format: json</li> <li>Quality Score: 95</li> </ul> <p>The CISA Known Exploited Vulnerabilities (KEV) Catalog lists vulnerabilities that are being actively exploited by threat actors.</p>"},{"location":"usage/data-sources/#adding-new-sources","title":"Adding New Sources","text":"<p>To add new data sources, see the Contributing Guide.</p>"},{"location":"usage/querying/","title":"Querying Data Sources","text":"<p>The Data Sources Manager provides multiple ways to query and access the data sources.</p>"},{"location":"usage/querying/#using-the-search-index","title":"Using the Search Index","text":"<p>The most efficient way to query data sources is through the SQLite-based search index. The index is built by the <code>index_sources.py</code> tool and provides fast access to sources based on various criteria.</p>"},{"location":"usage/querying/#basic-index-structure","title":"Basic Index Structure","text":"<p>The index contains several lookup tables:</p> <ul> <li><code>category_index</code>: Sources organized by category</li> <li><code>tag_index</code>: Sources organized by tag</li> <li><code>format_index</code>: Sources organized by format</li> <li><code>quality_index</code>: Sources organized by quality buckets</li> <li><code>source_lookup</code>: Detailed information for each source by ID</li> </ul>"},{"location":"usage/querying/#opening-the-index","title":"Opening the Index","text":"<pre><code>from sqlitedict import SqliteDict\n\n# Open the index\nwith SqliteDict(\"index.db\") as db:\n    # Use the index...\n    pass\n</code></pre>"},{"location":"usage/querying/#query-examples","title":"Query Examples","text":""},{"location":"usage/querying/#finding-sources-by-category","title":"Finding Sources by Category","text":"<pre><code>with SqliteDict(\"index.db\") as db:\n    # Get all vulnerability sources\n    vulnerability_sources = db[\"category_index\"].get(\"vulnerability\", [])\n\n    # Print the IDs\n    print(f\"Found {len(vulnerability_sources)} vulnerability sources:\")\n    for source_id in vulnerability_sources:\n        print(f\"- {source_id}\")\n</code></pre>"},{"location":"usage/querying/#finding-sources-by-tag","title":"Finding Sources by Tag","text":"<pre><code>with SqliteDict(\"index.db\") as db:\n    # Get sources with a specific tag\n    official_sources = db[\"tag_index\"].get(\"official\", [])\n\n    # Print the IDs\n    print(f\"Found {len(official_sources)} official sources:\")\n    for source_id in official_sources:\n        print(f\"- {source_id}\")\n</code></pre>"},{"location":"usage/querying/#finding-high-quality-sources","title":"Finding High-Quality Sources","text":"<pre><code>with SqliteDict(\"index.db\") as db:\n    # Get excellent quality sources (90-100 score)\n    excellent_sources = db[\"quality_index\"].get(\"excellent\", [])\n\n    # Print the IDs\n    print(f\"Found {len(excellent_sources)} excellent sources:\")\n    for source_id in excellent_sources:\n        print(f\"- {source_id}\")\n</code></pre>"},{"location":"usage/querying/#getting-source-details","title":"Getting Source Details","text":"<pre><code>with SqliteDict(\"index.db\") as db:\n    # Get details for a specific source\n    nvd = db[\"source_lookup\"].get(\"nvd-cve\")\n\n    if nvd:\n        print(f\"National Vulnerability Database:\")\n        print(f\"  URL: {nvd['url']}\")\n        print(f\"  Quality: {nvd['quality_score']}\")\n        print(f\"  Last Updated: {nvd['last_updated']}\")\n</code></pre>"},{"location":"usage/querying/#finding-sources-by-multiple-criteria","title":"Finding Sources by Multiple Criteria","text":"<pre><code>with SqliteDict(\"index.db\") as db:\n    # Get all vulnerability sources\n    vulnerability_sources = db[\"category_index\"].get(\"vulnerability\", [])\n\n    # Get all JSON format sources\n    json_sources = db[\"format_index\"].get(\"json\", [])\n\n    # Find vulnerability sources in JSON format\n    json_vulnerability_sources = set(vulnerability_sources).intersection(json_sources)\n\n    print(f\"Found {len(json_vulnerability_sources)} JSON vulnerability sources\")\n\n    # Get details for each source\n    for source_id in json_vulnerability_sources:\n        source = db[\"source_lookup\"].get(source_id)\n        print(f\"- {source['name']} (Quality: {source['quality_score']})\")\n</code></pre>"},{"location":"usage/querying/#direct-file-access","title":"Direct File Access","text":"<p>If you prefer to work directly with the source files, they are stored as JSON files in the <code>data-sources/</code> directory, organized by category and subcategory:</p> <pre><code>data-sources/\n\u2514\u2500\u2500 vulnerability/\n    \u251c\u2500\u2500 cve/\n    \u2502   \u251c\u2500\u2500 nvd.json\n    \u2502   \u2514\u2500\u2500 vendor-advisory.json\n    \u251c\u2500\u2500 exploit-db.json\n    \u2514\u2500\u2500 ...\n</code></pre> <p>You can read these files directly using standard file I/O:</p> <pre><code>import json\nimport glob\nfrom pathlib import Path\n\n# Find all source files\nsource_files = glob.glob(\"data-sources/**/*.json\", recursive=True)\n\n# Read each file\nsources = []\nfor file_path in source_files:\n    with open(file_path, \"r\") as f:\n        source = json.load(f)\n        sources.append(source)\n\n# Filter sources based on criteria\nhigh_quality_sources = [s for s in sources if s.get(\"quality_score\", 0) &gt;= 90]\n\nprint(f\"Found {len(high_quality_sources)} high-quality sources\")\nfor source in high_quality_sources:\n    print(f\"- {source['name']} (Quality: {source['quality_score']})\")\n</code></pre>"},{"location":"usage/querying/#python-api","title":"Python API","text":"<p>The Data Sources Manager includes Python tools that can be imported and used in your own code:</p> <pre><code>from tools.index_sources import build_category_index, build_tag_index, build_source_lookup\n\n# Load all sources\nsources = load_sources()\n\n# Build indices\ncategory_index = build_category_index(sources)\ntag_index = build_tag_index(sources)\nsource_lookup = build_source_lookup(sources)\n\n# Use the indices\nvulnerability_sources = category_index.get(\"vulnerability\", [])\nofficial_sources = tag_index.get(\"official\", [])\n\n# Find sources that match both criteria\nfor source_id in set(vulnerability_sources).intersection(official_sources):\n    source = source_lookup.get(source_id)\n    print(f\"- {source['name']} (Quality: {source['quality_score']})\")\n</code></pre>"},{"location":"usage/querying/#best-practices","title":"Best Practices","text":"<ul> <li>Use the index for most queries, as it's optimized for fast lookups</li> <li>Cache results when making multiple queries to avoid reopening the index</li> <li>Consider quality scores when selecting sources to use</li> <li>Check last_updated to ensure data is recent enough for your needs</li> </ul>"},{"location":"usage/scoring/","title":"Quality Scoring","text":"<p>The Data Sources Manager uses a quality scoring system to help prioritize the most reliable and valuable sources.</p>"},{"location":"usage/scoring/#scoring-mechanism","title":"Scoring Mechanism","text":"<p>Quality scores range from 0 to 100, where:</p> <ul> <li>0: Deprecated or retired source</li> <li>1-49: Poor quality source</li> <li>50-69: Average quality source</li> <li>70-89: Good quality source</li> <li>90-100: Excellent quality source</li> </ul>"},{"location":"usage/scoring/#scoring-components","title":"Scoring Components","text":"<p>The overall quality score is calculated based on four main factors:</p>"},{"location":"usage/scoring/#1-freshness-40","title":"1. Freshness (40%)","text":"<p>Measures how recently the source has been updated:</p> <ul> <li>Recent updates (within days): High freshness score</li> <li>Older updates (weeks or months): Lower freshness score</li> <li>No updates for extended periods: Very low freshness score</li> </ul> <p>Freshness is calculated based on the <code>last_updated</code> field in the source metadata.</p>"},{"location":"usage/scoring/#2-authority-30","title":"2. Authority (30%)","text":"<p>Measures the credibility and reliability of the source:</p> <ul> <li>Official government sources: High authority score</li> <li>Established security organizations: High authority score</li> <li>Community-driven sources: Medium authority score</li> <li>Individual contributors: Lower authority score</li> </ul> <p>Authority scores are assigned based on expert assessment.</p>"},{"location":"usage/scoring/#3-coverage-20","title":"3. Coverage (20%)","text":"<p>Measures the comprehensiveness of the data:</p> <ul> <li>Broad coverage of vulnerabilities: High coverage score</li> <li>Specialized focus: Medium to high coverage score (depending on completeness)</li> <li>Limited scope: Lower coverage score</li> </ul> <p>Coverage scores are assigned based on the breadth and depth of information provided.</p>"},{"location":"usage/scoring/#4-availability-10","title":"4. Availability (10%)","text":"<p>Measures the reliability of accessing the source:</p> <ul> <li>Consistent availability: High availability score</li> <li>Occasional downtime: Medium availability score</li> <li>Frequent unavailability: Low availability score</li> </ul> <p>Availability is monitored through regular health checks.</p>"},{"location":"usage/scoring/#calculation-formula","title":"Calculation Formula","text":"<p>The quality score is calculated using the following formula:</p> <pre><code>quality_score = (freshness * 0.4) + (authority * 0.3) + (coverage * 0.2) + (availability * 0.1)\n</code></pre> <p>This weighted formula ensures that more important factors (like freshness and authority) have a greater impact on the overall score.</p>"},{"location":"usage/scoring/#user-weighted-scores","title":"User-Weighted Scores","text":"<p>In addition to the standard quality score, the system also supports user-weighted scores:</p> <pre><code>{\n  \"user_preference_weight\": {\n    \"freshness\": 0.5,\n    \"authority\": 0.3,\n    \"coverage\": 0.1,\n    \"availability\": 0.1\n  }\n}\n</code></pre> <p>This allows users to prioritize sources based on their specific needs. For example, if freshness is more important to you than coverage, you can adjust the weights accordingly.</p>"},{"location":"usage/scoring/#score-buckets","title":"Score Buckets","text":"<p>For convenience, sources are categorized into quality buckets:</p> <ul> <li>Excellent: 90-100</li> <li>Good: 70-89</li> <li>Average: 50-69</li> <li>Poor: 1-49</li> <li>Deprecated: 0</li> </ul> <p>These buckets can be used to quickly filter sources by quality level:</p> <pre><code>from sqlitedict import SqliteDict\n\nwith SqliteDict(\"index.db\") as db:\n    # Get all excellent sources\n    excellent_sources = db[\"quality_index\"].get(\"excellent\", [])\n\n    # Get source details\n    for source_id in excellent_sources:\n        source = db[\"source_lookup\"].get(source_id)\n        print(f\"{source['name']}: {source['quality_score']}\")\n</code></pre>"},{"location":"usage/scoring/#updating-scores","title":"Updating Scores","text":"<p>Quality scores are updated automatically by the <code>score_sources.py</code> tool, which calculates freshness based on the current date and combines it with the other quality factors.</p> <p>You can manually run the scoring tool:</p> <pre><code>python tools/score_sources.py\n</code></pre> <p>This will update the quality scores for all sources based on the latest data.</p>"}]}