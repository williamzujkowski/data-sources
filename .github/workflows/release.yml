name: Release

on:
  push:
    branches:
      - main
    paths-ignore:
      - 'docs/**'
      - '*.md'

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install semantic-version gitpython

      - name: Run tests
        run: |
          pytest --cov=tools --cov-report=xml

      - name: Determine version bump
        id: version
        run: |
          # Simple semantic versioning based on commit messages
          # feat: -> minor version bump
          # fix: -> patch version bump
          # breaking change / BREAKING CHANGE -> major version bump

          LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "last_tag=$LAST_TAG" >> $GITHUB_OUTPUT

          # Get commits since last tag
          COMMITS=$(git log $LAST_TAG..HEAD --oneline)
          echo "Commits since $LAST_TAG:"
          echo "$COMMITS"

          # Determine version bump type
          if echo "$COMMITS" | grep -q "BREAKING CHANGE\|breaking change"; then
            echo "bump_type=major" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "^[a-f0-9]* feat[:(]"; then
            echo "bump_type=minor" >> $GITHUB_OUTPUT
          elif echo "$COMMITS" | grep -q "^[a-f0-9]* fix[:(]"; then
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          else
            echo "bump_type=patch" >> $GITHUB_OUTPUT
          fi

      - name: Calculate new version
        id: new_version
        run: |
          LAST_TAG="${{ steps.version.outputs.last_tag }}"
          BUMP_TYPE="${{ steps.version.outputs.bump_type }}"

          # Remove 'v' prefix if present
          CURRENT_VERSION=${LAST_TAG#v}

          # Split version into parts
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]:-0}
          MINOR=${VERSION_PARTS[1]:-0}
          PATCH=${VERSION_PARTS[2]:-0}

          # Bump version based on type
          case $BUMP_TYPE in
            major)
              MAJOR=$((MAJOR + 1))
              MINOR=0
              PATCH=0
              ;;
            minor)
              MINOR=$((MINOR + 1))
              PATCH=0
              ;;
            patch)
              PATCH=$((PATCH + 1))
              ;;
          esac

          NEW_VERSION="$MAJOR.$MINOR.$PATCH"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT

          echo "Version bump: $LAST_TAG -> v$NEW_VERSION ($BUMP_TYPE)"

      - name: Update version in pyproject.toml
        run: |
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml

          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add pyproject.toml
          git commit -m "chore: bump version to $NEW_VERSION" || true

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.new_version.outputs.new_tag }}
          release_name: Release ${{ steps.new_version.outputs.new_tag }}
          body: |
            ## Changes

            This release includes the following changes since ${{ steps.version.outputs.last_tag }}:

            ### Commits
            ${{ steps.version.outputs.commits }}

            ## Installation

            ```bash
            pip install git+https://github.com/williamzujkowski/data-sources.git@${{ steps.new_version.outputs.new_tag }}
            ```

            ## Verification

            This release has been automatically tested and all tests are passing.
          draft: false
          prerelease: false

      - name: Build package
        run: |
          python -m pip install build
          python -m build

      - name: Upload Release Assets
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./dist/
          asset_name: release-assets
          asset_content_type: application/zip
