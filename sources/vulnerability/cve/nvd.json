{
  "api": {
    "base_url": "https://services.nvd.nist.gov/rest/json/cves/2.0",
    "endpoints": [
      {
        "description": "Retrieve CVE records with flexible filtering options",
        "headers": {
          "Accept": "application/json",
          "apiKey": "YOUR_API_KEY (optional)"
        },
        "method": "GET",
        "parameters": [
          {
            "description": "Specific CVE ID to retrieve",
            "example": "CVE-2021-44228",
            "name": "cveId",
            "required": false,
            "type": "string"
          },
          {
            "description": "CPE name to filter vulnerabilities",
            "example": "cpe:2.3:a:apache:log4j:2.14.1:*:*:*:*:*:*:*",
            "name": "cpeName",
            "required": false,
            "type": "string"
          },
          {
            "description": "Search CVE descriptions for keywords",
            "example": "remote code execution",
            "name": "keywordSearch",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start of publication date range (ISO 8601)",
            "example": "2024-01-01T00:00:00.000",
            "name": "pubStartDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "End of publication date range (ISO 8601)",
            "example": "2024-01-31T23:59:59.999",
            "name": "pubEndDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Start of last modification date range",
            "example": "2024-01-01T00:00:00.000",
            "name": "lastModStartDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "End of last modification date range",
            "example": "2024-01-31T23:59:59.999",
            "name": "lastModEndDate",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by CVSS v2 severity",
            "example": "HIGH",
            "name": "cvssV2Severity",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by CVSS v3 severity",
            "example": "CRITICAL",
            "name": "cvssV3Severity",
            "required": false,
            "type": "string"
          },
          {
            "description": "Number of results per page (max 2000)",
            "example": "100",
            "name": "resultsPerPage",
            "required": false,
            "type": "integer"
          },
          {
            "description": "Starting index for pagination",
            "example": "0",
            "name": "startIndex",
            "required": false,
            "type": "integer"
          }
        ],
        "path": "/cves/2.0",
        "rate_limit": {
          "notes": "Without API key: 50 requests in 30-day window. With API key: 50,000 requests in 30-day window",
          "requests_per_30_days": 50,
          "requests_per_30_days_with_key": 50000,
          "requests_per_minute": 5
        },
        "response_format": {
          "example": {
            "format": "NVD_CVE",
            "resultsPerPage": 1,
            "startIndex": 0,
            "totalResults": 1,
            "version": "2.0",
            "vulnerabilities": [
              {
                "cve": {
                  "descriptions": [
                    {
                      "lang": "en",
                      "value": "Apache Log4j2 2.0-beta9 through 2.15.0..."
                    }
                  ],
                  "id": "CVE-2021-44228",
                  "lastModified": "2023-12-14T10:15:00.000",
                  "metrics": {
                    "cvssMetricV31": [
                      {
                        "cvssData": {
                          "baseScore": 10.0,
                          "baseSeverity": "CRITICAL",
                          "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H",
                          "version": "3.1"
                        },
                        "source": "nvd@nist.gov",
                        "type": "Primary"
                      }
                    ]
                  },
                  "published": "2021-12-10T10:15:00.000",
                  "references": [
                    {
                      "source": "security@apache.org",
                      "url": "https://logging.apache.org/log4j/2.x/security.html"
                    }
                  ],
                  "sourceIdentifier": "security@apache.org",
                  "vulnStatus": "Analyzed"
                }
              }
            ]
          },
          "schema_url": "https://csrc.nist.gov/schema/nvd/api/2.0/cve_api_json_2.0.schema",
          "type": "JSON"
        }
      },
      {
        "description": "Retrieve CPE dictionary records",
        "method": "GET",
        "parameters": [
          {
            "description": "Specific CPE UUID",
            "example": "87316812-5F2C-4286-94FE-CC98B9EAEF53",
            "name": "cpeNameId",
            "required": false,
            "type": "string"
          },
          {
            "description": "Partial CPE URI to match",
            "example": "cpe:2.3:a:microsoft",
            "name": "cpeMatchString",
            "required": false,
            "type": "string"
          },
          {
            "description": "Search CPE titles for keywords",
            "example": "Windows Server",
            "name": "keywordSearch",
            "required": false,
            "type": "string"
          }
        ],
        "path": "/cpenames/2.0"
      }
    ],
    "type": "REST"
  },
  "authentication": {
    "documentation": "https://nvd.nist.gov/developers/start-here",
    "example_implementation": {
      "curl": "curl -H 'apiKey: YOUR_KEY' 'https://services.nvd.nist.gov/rest/json/cves/2.0'",
      "javascript": "fetch(url, { headers: { 'apiKey': process.env.NVD_API_KEY } })",
      "python": "headers = {'apiKey': os.environ.get('NVD_API_KEY')}"
    },
    "registration_url": "https://nvd.nist.gov/developers/request-an-api-key",
    "required": false,
    "setup_instructions": [
      "Step 1: Navigate to https://nvd.nist.gov/developers/request-an-api-key",
      "Step 2: Fill out the request form with your organization details",
      "Step 3: Submit the form and wait for email confirmation (usually within 1 business day)",
      "Step 4: Store the API key securely in environment variables",
      "Step 5: Include the key in the 'apiKey' header for all requests"
    ],
    "type": "api_key"
  },
  "authority": 100,
  "category": "vulnerability",
  "coverage": 95,
  "data_coverage": {
    "completeness": "99% - Most comprehensive CVE database available",
    "data_types": [
      "CVE",
      "CPE",
      "CWE",
      "CVSS"
    ],
    "geographical": "global",
    "temporal": {
      "historical_data": "1999-present",
      "latency": "CVEs typically appear within hours of MITRE publication",
      "update_frequency": "real-time"
    }
  },
  "data_format": {
    "compression": "none",
    "encoding": "UTF-8",
    "field_descriptions": {
      "configurations": "Vulnerable product configurations in CPE format",
      "descriptions": "Array of vulnerability descriptions in multiple languages",
      "id": "CVE identifier in format CVE-YYYY-NNNNN",
      "lastModified": "Date/time of last modification",
      "metrics.cvssMetricV2": "CVSS v2.0 scoring information (legacy)",
      "metrics.cvssMetricV31": "CVSS v3.1 scoring information",
      "published": "Date/time vulnerability was published to NVD",
      "references": "External references and advisories",
      "sourceIdentifier": "Organization that reported the vulnerability",
      "vulnStatus": "Analysis status (Analyzed, Awaiting Analysis, Modified, etc.)",
      "weaknesses": "Associated CWE (Common Weakness Enumeration) IDs"
    },
    "primary_format": "JSON",
    "schemas": {
      "documentation": "https://nvd.nist.gov/developers/vulnerabilities",
      "json_schema": "https://csrc.nist.gov/schema/nvd/api/2.0/cve_api_json_2.0.schema"
    }
  },
  "description": "The NIST National Vulnerability Database (NVD) is the U.S. government repository of standards-based vulnerability management data. It provides comprehensive vulnerability metrics, reference data, and is the official source for CVE content published by MITRE.",
  "documentation": "https://nvd.nist.gov/developers",
  "format": "json",
  "id": "nvd-cve",
  "integration_examples": {
    "curl": {
      "basic_fetch": "# Get specific CVE\ncurl -X GET 'https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=CVE-2021-44228'",
      "date_range": "# Get CVEs from last 7 days\ncurl -X GET 'https://services.nvd.nist.gov/rest/json/cves/2.0?pubStartDate=2024-01-08T00:00:00.000Z&pubEndDate=2024-01-15T23:59:59.999Z'",
      "search": "# Search for keyword\ncurl -X GET 'https://services.nvd.nist.gov/rest/json/cves/2.0?keywordSearch=apache%20log4j&resultsPerPage=10'",
      "severity_filter": "# Get critical vulnerabilities\ncurl -X GET 'https://services.nvd.nist.gov/rest/json/cves/2.0?cvssV3Severity=CRITICAL&resultsPerPage=50'",
      "with_auth": "# With API key for higher rate limits\ncurl -H 'apiKey: YOUR_API_KEY' \\\n  'https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=CVE-2021-44228'"
    },
    "go": {
      "basic_fetch": "package main\n\nimport (\n    \"encoding/json\"\n    \"fmt\"\n    \"io\"\n    \"net/http\"\n    \"os\"\n    \"time\"\n)\n\ntype NVDResponse struct {\n    ResultsPerPage int `json:\"resultsPerPage\"`\n    StartIndex     int `json:\"startIndex\"`\n    TotalResults   int `json:\"totalResults\"`\n    Vulnerabilities []struct {\n        CVE struct {\n            ID           string `json:\"id\"`\n            Published    string `json:\"published\"`\n            LastModified string `json:\"lastModified\"`\n            Descriptions []struct {\n                Lang  string `json:\"lang\"`\n                Value string `json:\"value\"`\n            } `json:\"descriptions\"`\n        } `json:\"cve\"`\n    } `json:\"vulnerabilities\"`\n}\n\nfunc fetchCVE(cveID string, apiKey string) (*NVDResponse, error) {\n    url := fmt.Sprintf(\"https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=%s\", cveID)\n    \n    client := &http.Client{Timeout: 30 * time.Second}\n    req, err := http.NewRequest(\"GET\", url, nil)\n    if err != nil {\n        return nil, err\n    }\n    \n    // Add API key if provided\n    if apiKey != \"\" {\n        req.Header.Set(\"apiKey\", apiKey)\n    }\n    \n    resp, err := client.Do(req)\n    if err != nil {\n        return nil, err\n    }\n    defer resp.Body.Close()\n    \n    if resp.StatusCode != http.StatusOK {\n        return nil, fmt.Errorf(\"HTTP %d: %s\", resp.StatusCode, resp.Status)\n    }\n    \n    body, err := io.ReadAll(resp.Body)\n    if err != nil {\n        return nil, err\n    }\n    \n    var nvdResp NVDResponse\n    if err := json.Unmarshal(body, &nvdResp); err != nil {\n        return nil, err\n    }\n    \n    return &nvdResp, nil\n}\n\nfunc main() {\n    apiKey := os.Getenv(\"NVD_API_KEY\")\n    \n    data, err := fetchCVE(\"CVE-2021-44228\", apiKey)\n    if err != nil {\n        fmt.Printf(\"Error: %v\\n\", err)\n        return\n    }\n    \n    if data.TotalResults > 0 {\n        cve := data.Vulnerabilities[0].CVE\n        fmt.Printf(\"%s: %s\\n\", cve.ID, cve.Descriptions[0].Value)\n    }\n}"
    },
    "javascript": {
      "async_await": "// Modern async/await with error handling\nclass NVDClient {\n  constructor(apiKey = null) {\n    this.baseUrl = 'https://services.nvd.nist.gov/rest/json/cves/2.0';\n    this.apiKey = apiKey || process.env.NVD_API_KEY;\n    this.headers = this.apiKey ? { 'apiKey': this.apiKey } : {};\n  }\n  \n  async searchKeyword(keyword, limit = 100) {\n    const params = new URLSearchParams({\n      keywordSearch: keyword,\n      resultsPerPage: Math.min(limit, 2000)\n    });\n    \n    try {\n      const response = await fetch(`${this.baseUrl}?${params}`, {\n        headers: this.headers\n      });\n      \n      if (!response.ok) {\n        throw new Error(`HTTP error! status: ${response.status}`);\n      }\n      \n      const data = await response.json();\n      return data.vulnerabilities.map(v => v.cve);\n      \n    } catch (error) {\n      console.error('Error fetching CVEs:', error);\n      return [];\n    }\n  }\n  \n  async getRecentCritical(days = 7) {\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - days);\n    \n    const params = new URLSearchParams({\n      pubStartDate: startDate.toISOString(),\n      cvssV3Severity: 'CRITICAL',\n      resultsPerPage: 500\n    });\n    \n    const response = await fetch(`${this.baseUrl}?${params}`, {\n      headers: this.headers\n    });\n    \n    const data = await response.json();\n    return data.vulnerabilities.map(v => v.cve);\n  }\n}\n\n// Usage\nconst client = new NVDClient();\nclient.getRecentCritical(30).then(cves => {\n  console.log(`Found ${cves.length} critical CVEs in last 30 days`);\n});",
      "basic_fetch": "// Fetch specific CVE\nconst fetchCVE = async (cveId) => {\n  const url = `https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=${cveId}`;\n  const headers = {};\n  \n  // Optional: Add API key if available\n  if (process.env.NVD_API_KEY) {\n    headers.apiKey = process.env.NVD_API_KEY;\n  }\n  \n  const response = await fetch(url, { headers });\n  const data = await response.json();\n  \n  if (data.totalResults > 0) {\n    return data.vulnerabilities[0].cve;\n  }\n  return null;\n};\n\n// Usage\nfetchCVE('CVE-2021-44228').then(cve => {\n  console.log(`${cve.id}: ${cve.descriptions[0].value}`);\n});",
      "error_handling": "// Robust error handling with retry logic\nconst fetchWithRetry = async (url, options = {}, maxRetries = 3) => {\n  for (let i = 0; i < maxRetries; i++) {\n    try {\n      const response = await fetch(url, options);\n      \n      if (response.status === 403) {\n        console.warn('Rate limit exceeded. Waiting...');\n        await new Promise(resolve => setTimeout(resolve, 60000));\n        continue;\n      }\n      \n      if (!response.ok) {\n        throw new Error(`HTTP ${response.status}: ${response.statusText}`);\n      }\n      \n      return await response.json();\n      \n    } catch (error) {\n      console.error(`Attempt ${i + 1} failed:`, error.message);\n      \n      if (i < maxRetries - 1) {\n        const waitTime = Math.pow(2, i) * 1000; // Exponential backoff\n        await new Promise(resolve => setTimeout(resolve, waitTime));\n      } else {\n        throw error;\n      }\n    }\n  }\n};\n\n// Usage\nfetchWithRetry('https://services.nvd.nist.gov/rest/json/cves/2.0?cveId=CVE-2021-44228')\n  .then(data => console.log('Success:', data))\n  .catch(error => console.error('Failed after retries:', error));"
    },
    "python": {
      "basic_fetch": "import requests\nimport os\nfrom datetime import datetime, timedelta\n\n# Fetch recent CVEs from last 7 days\nurl = 'https://services.nvd.nist.gov/rest/json/cves/2.0'\nheaders = {'apiKey': os.environ.get('NVD_API_KEY')}  # Optional\n\nstart_date = (datetime.now() - timedelta(days=7)).isoformat() + 'Z'\nparams = {\n    'pubStartDate': start_date,\n    'resultsPerPage': 100\n}\n\nresponse = requests.get(url, headers=headers, params=params)\ndata = response.json()\n\nfor vuln in data['vulnerabilities']:\n    cve = vuln['cve']\n    print(f\"{cve['id']}: {cve['descriptions'][0]['value'][:100]}...\")",
      "error_handling": "import requests\nimport time\nfrom typing import Optional, Dict, Any\n\ndef fetch_cve_with_retry(\n    cve_id: str, \n    api_key: Optional[str] = None, \n    max_retries: int = 3\n) -> Optional[Dict[str, Any]]:\n    url = 'https://services.nvd.nist.gov/rest/json/cves/2.0'\n    headers = {'apiKey': api_key} if api_key else {}\n    params = {'cveId': cve_id}\n    \n    for attempt in range(max_retries):\n        try:\n            response = requests.get(url, headers=headers, params=params, timeout=30)\n            \n            if response.status_code == 200:\n                return response.json()\n            elif response.status_code == 403:\n                print('Rate limit exceeded. Consider using an API key.')\n                if not api_key:\n                    time.sleep(60)  # Wait longer without key\n                else:\n                    time.sleep(10)\n            elif response.status_code == 404:\n                print(f'CVE {cve_id} not found')\n                return None\n            else:\n                print(f'Error {response.status_code}: {response.text}')\n                \n        except requests.exceptions.RequestException as e:\n            print(f'Request failed: {e}')\n            \n        if attempt < max_retries - 1:\n            wait_time = 2 ** attempt  # Exponential backoff\n            time.sleep(wait_time)\n    \n    return None",
      "full_example": "#!/usr/bin/env python3\n\"\"\"\nNVD CVE Fetcher - Complete working example\n\"\"\"\n\nimport requests\nimport json\nimport os\nimport time\nfrom datetime import datetime, timedelta\nfrom typing import List, Dict, Any, Optional\n\nclass NVDClient:\n    def __init__(self, api_key: Optional[str] = None):\n        self.base_url = 'https://services.nvd.nist.gov/rest/json/cves/2.0'\n        self.api_key = api_key or os.environ.get('NVD_API_KEY')\n        self.headers = {'apiKey': self.api_key} if self.api_key else {}\n        \n        # Rate limiting\n        self.last_request_time = 0\n        self.min_interval = 0.6 if self.api_key else 6  # seconds between requests\n    \n    def _rate_limit(self):\n        elapsed = time.time() - self.last_request_time\n        if elapsed < self.min_interval:\n            time.sleep(self.min_interval - elapsed)\n        self.last_request_time = time.time()\n    \n    def get_cve(self, cve_id: str) -> Optional[Dict[str, Any]]:\n        \"\"\"Fetch a specific CVE by ID\"\"\"\n        self._rate_limit()\n        \n        params = {'cveId': cve_id}\n        response = requests.get(self.base_url, headers=self.headers, params=params)\n        \n        if response.status_code == 200:\n            data = response.json()\n            if data['totalResults'] > 0:\n                return data['vulnerabilities'][0]['cve']\n        return None\n    \n    def search_keyword(self, keyword: str, limit: int = 100) -> List[Dict[str, Any]]:\n        \"\"\"Search CVEs by keyword\"\"\"\n        self._rate_limit()\n        \n        params = {\n            'keywordSearch': keyword,\n            'resultsPerPage': min(limit, 2000)\n        }\n        \n        response = requests.get(self.base_url, headers=self.headers, params=params)\n        \n        if response.status_code == 200:\n            data = response.json()\n            return [v['cve'] for v in data['vulnerabilities']]\n        return []\n    \n    def get_recent_critical(self, days: int = 7) -> List[Dict[str, Any]]:\n        \"\"\"Get recent critical vulnerabilities\"\"\"\n        self._rate_limit()\n        \n        start_date = (datetime.now() - timedelta(days=days)).isoformat() + 'Z'\n        \n        params = {\n            'pubStartDate': start_date,\n            'cvssV3Severity': 'CRITICAL',\n            'resultsPerPage': 500\n        }\n        \n        response = requests.get(self.base_url, headers=self.headers, params=params)\n        \n        if response.status_code == 200:\n            data = response.json()\n            return [v['cve'] for v in data['vulnerabilities']]\n        return []\n    \n    def get_by_cpe(self, cpe_name: str) -> List[Dict[str, Any]]:\n        \"\"\"Get vulnerabilities for a specific CPE (product)\"\"\"\n        self._rate_limit()\n        \n        params = {\n            'cpeName': cpe_name,\n            'resultsPerPage': 500\n        }\n        \n        response = requests.get(self.base_url, headers=self.headers, params=params)\n        \n        if response.status_code == 200:\n            data = response.json()\n            return [v['cve'] for v in data['vulnerabilities']]\n        return []\n\n# Example usage\nif __name__ == '__main__':\n    # Initialize client\n    client = NVDClient()\n    \n    # Get specific CVE\n    cve = client.get_cve('CVE-2021-44228')\n    if cve:\n        print(f\"Found: {cve['id']}\")\n        print(f\"Description: {cve['descriptions'][0]['value'][:200]}...\")\n    \n    # Search by keyword\n    print(\"\\nSearching for 'log4j' vulnerabilities...\")\n    results = client.search_keyword('log4j', limit=5)\n    for cve in results:\n        print(f\"- {cve['id']}: Published {cve['published']}\")\n    \n    # Get recent critical CVEs\n    print(\"\\nRecent critical vulnerabilities:\")\n    critical = client.get_recent_critical(days=30)\n    print(f\"Found {len(critical)} critical CVEs in last 30 days\")\n    \n    # Get vulnerabilities for specific product\n    print(\"\\nVulnerabilities for Apache HTTP Server 2.4.54:\")\n    cpe = 'cpe:2.3:a:apache:http_server:2.4.54:*:*:*:*:*:*:*'\n    product_vulns = client.get_by_cpe(cpe)\n    print(f\"Found {len(product_vulns)} vulnerabilities\")",
      "pagination": "import requests\nimport time\n\ndef fetch_all_cves(start_date, api_key=None):\n    url = 'https://services.nvd.nist.gov/rest/json/cves/2.0'\n    headers = {'apiKey': api_key} if api_key else {}\n    \n    all_vulnerabilities = []\n    start_index = 0\n    results_per_page = 2000  # Maximum allowed\n    \n    while True:\n        params = {\n            'pubStartDate': start_date,\n            'resultsPerPage': results_per_page,\n            'startIndex': start_index\n        }\n        \n        response = requests.get(url, headers=headers, params=params)\n        data = response.json()\n        \n        all_vulnerabilities.extend(data['vulnerabilities'])\n        \n        total_results = data['totalResults']\n        if start_index + results_per_page >= total_results:\n            break\n            \n        start_index += results_per_page\n        time.sleep(6)  # Respect rate limits (10 req/min without key)\n    \n    return all_vulnerabilities"
    }
  },
  "last_updated": "2025-08-14T22:22:18.965482Z",
  "metadata": {
    "added_date": "2024-01-15",
    "alternatives": [
      "mitre-cve",
      "vuldb",
      "osv-dev"
    ],
    "contributors": [
      "williamzujkowski"
    ],
    "last_updated": "2024-01-15",
    "related_sources": [
      "mitre-cve",
      "cisa-kev",
      "epss"
    ],
    "tags": [
      "vulnerability",
      "cve",
      "official-source",
      "government",
      "cvss",
      "cpe"
    ]
  },
  "name": "National Vulnerability Database",
  "operational_guidance": {
    "best_practices": [
      "Use API key to avoid rate limiting",
      "Cache responses for at least 1 hour",
      "Implement exponential backoff on errors",
      "Use date ranges to fetch only new/updated CVEs",
      "Store CVE data locally and sync incrementally",
      "Monitor the modified feed for updates to existing CVEs",
      "Use CPE matching for product-specific monitoring"
    ],
    "common_pitfalls": [
      "Hitting rate limits without API key (50 requests/30 days)",
      "Not handling pagination for large result sets",
      "Ignoring lastModified dates when syncing",
      "Not accounting for CVE rejection/withdrawal",
      "Missing updates by only checking 'recent' feed"
    ],
    "cost_considerations": {
      "free_tier_limits": "50 requests per 30 days without API key, 50,000 with free API key",
      "paid_tiers": "N/A - Completely free service",
      "pricing_model": "free"
    },
    "recommended_update_frequency": "Every 6-24 hours for recent/modified feeds"
  },
  "quality_metrics": {
    "accuracy": "Official U.S. government source, highly accurate",
    "community_rating": 4.8,
    "false_positive_rate": "N/A - Reports actual CVEs only",
    "last_verified": "2024-01-15",
    "reliability": "high",
    "timeliness": "Real-time updates as CVEs are analyzed"
  },
  "quality_score": 90,
  "subcategory": "cve",
  "troubleshooting": {
    "common_errors": [
      {
        "error_code": "403",
        "meaning": "Rate limit exceeded",
        "solution": "Request a free API key or wait for rate limit window to reset"
      },
      {
        "error_code": "404",
        "meaning": "CVE not found or endpoint incorrect",
        "solution": "Verify CVE ID format and check if CVE exists on nvd.nist.gov website"
      },
      {
        "error_code": "400",
        "meaning": "Invalid parameters",
        "solution": "Check date format (ISO 8601), parameter names, and value constraints"
      },
      {
        "error_code": "503",
        "meaning": "Service temporarily unavailable",
        "solution": "NVD maintenance or high load - implement retry with exponential backoff"
      }
    ],
    "support_channels": {
      "community": "https://github.com/nvd-api/feedback",
      "documentation": "https://nvd.nist.gov/developers",
      "email": "nvd@nist.gov",
      "issues": "https://nvd.nist.gov/contact"
    }
  },
  "url": "https://nvd.nist.gov"
}
