{
  "api": {
    "base_url": "https://api.github.com",
    "bulk_download": {
      "available": true,
      "description": "Complete database available as Git repository with individual JSON files",
      "format": "JSON (OSV schema)",
      "url": "https://github.com/github/advisory-database"
    },
    "endpoints": [
      {
        "description": "List global security advisories",
        "method": "GET",
        "parameters": [
          {
            "description": "Filter by GHSA ID",
            "example": "GHSA-xxxx-xxxx-xxxx",
            "name": "ghsa_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by CVE ID",
            "example": "CVE-2021-44228",
            "name": "cve_id",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by ecosystem",
            "example": "npm",
            "name": "ecosystem",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by severity",
            "example": "critical",
            "name": "severity",
            "required": false,
            "type": "string"
          },
          {
            "description": "Filter by package",
            "example": "package_name",
            "name": "affects",
            "required": false,
            "type": "string"
          },
          {
            "description": "Results per page (max 100)",
            "example": "30",
            "name": "per_page",
            "required": false,
            "type": "integer"
          }
        ],
        "path": "/advisories",
        "rate_limit": {
          "authenticated": "5000 requests/hour",
          "notes": "Free GitHub account provides generous rate limits",
          "unauthenticated": "60 requests/hour"
        }
      },
      {
        "description": "Get specific advisory details",
        "method": "GET",
        "parameters": [],
        "path": "/advisories/{ghsa_id}"
      }
    ],
    "graphql": {
      "authentication": "Required (free GitHub token)",
      "description": "GraphQL API for richer queries",
      "endpoint": "https://api.github.com/graphql",
      "example_query": "query { securityAdvisories(first: 10, ecosystem: NPM) { nodes { ghsaId summary severity publishedAt } } }"
    },
    "type": "REST/GraphQL"
  },
  "authentication": {
    "notes": "FREE public access without auth (60 requests/hour). With free GitHub account token: 5000 requests/hour. GraphQL API requires token but provides richer data.",
    "required": false,
    "type": "token"
  },
  "authority": 88,
  "category": "vulnerability",
  "coverage": 92,
  "data_coverage": {
    "ecosystems": [
      "npm",
      "pip",
      "rubygems",
      "packagist",
      "maven",
      "nuget",
      "go",
      "rust",
      "erlang",
      "swift",
      "pub",
      "github-actions"
    ],
    "sources": [
      "GitHub Security Advisories",
      "CVE/NVD",
      "Community submissions",
      "Security researchers",
      "Package maintainers"
    ],
    "temporal": {
      "historical_data": "2017-present",
      "latency": "Advisories appear within hours",
      "update_frequency": "real-time"
    },
    "total_advisories": "20,000+"
  },
  "data_format": {
    "encoding": "UTF-8",
    "field_descriptions": {
      "cve_id": "CVE identifier if assigned",
      "cvss": "CVSS score and vector",
      "cwes": "CWE classifications",
      "description": "Detailed vulnerability description",
      "ghsa_id": "GitHub Security Advisory ID",
      "published_at": "Publication timestamp",
      "references": "External references and links",
      "severity": "CVSS severity (critical/high/medium/low)",
      "summary": "Brief description",
      "updated_at": "Last update timestamp",
      "vulnerabilities": "Affected packages and versions",
      "withdrawn_at": "Withdrawal timestamp if retracted"
    },
    "primary_format": "JSON",
    "schema": "OSV (Open Source Vulnerability) format"
  },
  "description": "GitHub's security advisory database providing FREE access to CVEs and security advisories across all ecosystems. Public API requires minimal authentication (GitHub token) for higher rate limits.",
  "documentation": "https://docs.github.com/en/rest/security-advisories",
  "format": "json",
  "id": "github-advisory-database",
  "integration_examples": {
    "curl": {
      "get_specific": "# Get specific advisory - FREE!\ncurl 'https://api.github.com/advisories/GHSA-xxxx-xxxx-xxxx'",
      "graphql": "# GraphQL query (requires token)\ncurl -H 'Authorization: Bearer YOUR_GITHUB_TOKEN' \\\n  -X POST -d '{\"query\":\"{ securityAdvisories(first: 5) { nodes { ghsaId summary } } }\"}' \\\n  https://api.github.com/graphql",
      "list_advisories": "# List advisories - FREE (60 req/hour without auth)\ncurl 'https://api.github.com/advisories?ecosystem=npm&severity=critical&per_page=5'",
      "with_token": "# With token for higher rate limits (5000 req/hour)\ncurl -H 'Authorization: token YOUR_GITHUB_TOKEN' \\\n  'https://api.github.com/advisories?ecosystem=pip&severity=high'"
    },
    "javascript": {
      "fetch_advisories": "// Fetch GitHub Advisories - FREE!\nconst fetchAdvisories = async (ecosystem = 'npm', severity = 'high') => {\n  const url = 'https://api.github.com/advisories';\n  const params = new URLSearchParams({\n    ecosystem,\n    severity,\n    per_page: 20\n  });\n  \n  // Optional: Add token for higher rate limits\n  const headers = {};\n  // headers['Authorization'] = 'token YOUR_GITHUB_TOKEN';\n  \n  const response = await fetch(`${url}?${params}`, { headers });\n  const advisories = await response.json();\n  \n  console.log(`Found ${advisories.length} ${severity} ${ecosystem} advisories (FREE!)`);\n  \n  advisories.forEach(advisory => {\n    console.log(`\\n${advisory.ghsa_id}: ${advisory.summary}`);\n    console.log(`Severity: ${advisory.severity}`);\n    console.log(`Published: ${advisory.published_at}`);\n  });\n  \n  return advisories;\n};\n\n// Usage\nfetchAdvisories('npm', 'critical');",
      "graphql_client": "// GraphQL client for GitHub Advisories - Requires FREE token\nconst { Octokit } = require('@octokit/core');\n\nconst octokit = new Octokit({\n  auth: 'YOUR_GITHUB_TOKEN' // Get from github.com/settings/tokens\n});\n\nconst getAdvisories = async () => {\n  const query = `\n    query($first: Int!) {\n      securityAdvisories(first: $first, orderBy: {field: UPDATED_AT, direction: DESC}) {\n        nodes {\n          ghsaId\n          summary\n          severity\n          publishedAt\n          vulnerabilities(first: 3) {\n            nodes {\n              package {\n                ecosystem\n                name\n              }\n              vulnerableVersionRange\n            }\n          }\n        }\n      }\n    }\n  `;\n  \n  const result = await octokit.graphql(query, {\n    first: 10\n  });\n  \n  console.log('Latest Security Advisories:');\n  result.securityAdvisories.nodes.forEach(advisory => {\n    console.log(`- ${advisory.ghsaId}: ${advisory.summary}`);\n  });\n  \n  return result;\n};\n\ngetAdvisories();"
    },
    "python": {
      "basic_query": "import requests\n\n# Query GitHub Advisory Database - FREE (60 req/hour without auth)\nurl = 'https://api.github.com/advisories'\nparams = {\n    'ecosystem': 'npm',\n    'severity': 'critical',\n    'per_page': 10\n}\n\n# Optional: Add token for higher rate limits (5000 req/hour)\nheaders = {}\n# headers['Authorization'] = 'token YOUR_GITHUB_TOKEN'\n\nresponse = requests.get(url, params=params, headers=headers)\nadvisories = response.json()\n\nprint(f\"Found {len(advisories)} critical npm advisories (FREE!)\\n\")\n\nfor advisory in advisories:\n    print(f\"\ud83d\udd34 {advisory['ghsa_id']}: {advisory['summary']}\")\n    print(f\"   Severity: {advisory['severity']}\")\n    print(f\"   Published: {advisory['published_at']}\")\n    if advisory.get('cve_id'):\n        print(f\"   CVE: {advisory['cve_id']}\")\n    print()",
      "bulk_download": "import requests\nimport zipfile\nimport json\nimport os\n\ndef download_advisory_database():\n    \"\"\"Download entire GitHub Advisory Database - FREE!\"\"\"\n    \n    # Clone or download the repository\n    repo_url = 'https://github.com/github/advisory-database/archive/refs/heads/main.zip'\n    \n    print(\"Downloading GitHub Advisory Database (FREE!)...\")\n    response = requests.get(repo_url, stream=True)\n    \n    with open('advisory-database.zip', 'wb') as f:\n        for chunk in response.iter_content(chunk_size=8192):\n            f.write(chunk)\n    \n    # Extract and parse\n    with zipfile.ZipFile('advisory-database.zip', 'r') as zip_ref:\n        zip_ref.extractall('advisory-database')\n    \n    # Read advisories\n    advisories = []\n    for root, dirs, files in os.walk('advisory-database'):\n        for file in files:\n            if file.endswith('.json'):\n                with open(os.path.join(root, file), 'r') as f:\n                    advisory = json.load(f)\n                    advisories.append(advisory)\n    \n    print(f\"Downloaded {len(advisories)} advisories\")\n    return advisories\n\n# Download full database\nadvisories = download_advisory_database()",
      "graphql_query": "import requests\nimport json\n\n# GraphQL query for richer data - Requires FREE GitHub token\nurl = 'https://api.github.com/graphql'\n\n# Get token from: https://github.com/settings/tokens\nheaders = {\n    'Authorization': 'Bearer YOUR_GITHUB_TOKEN',\n    'Content-Type': 'application/json'\n}\n\nquery = '''\nquery GetAdvisories($ecosystem: SecurityAdvisoryEcosystem, $first: Int!) {\n  securityAdvisories(ecosystem: $ecosystem, first: $first, orderBy: {field: PUBLISHED_AT, direction: DESC}) {\n    nodes {\n      ghsaId\n      summary\n      description\n      severity\n      publishedAt\n      identifiers {\n        type\n        value\n      }\n      vulnerabilities(first: 5) {\n        nodes {\n          package {\n            ecosystem\n            name\n          }\n          vulnerableVersionRange\n          firstPatchedVersion {\n            identifier\n          }\n        }\n      }\n    }\n  }\n}\n'''\n\nvariables = {\n    'ecosystem': 'NPM',\n    'first': 5\n}\n\nresponse = requests.post(url, json={'query': query, 'variables': variables}, headers=headers)\ndata = response.json()\n\nif 'data' in data:\n    advisories = data['data']['securityAdvisories']['nodes']\n    for advisory in advisories:\n        print(f\"Advisory: {advisory['ghsaId']}\")\n        print(f\"Summary: {advisory['summary']}\")\n        print(f\"Severity: {advisory['severity']}\")\n        print()"
    }
  },
  "last_updated": "2025-08-15T12:30:00.000Z",
  "metadata": {
    "alternatives": [
      "osv-dev",
      "nvd",
      "snyk-vulnerability-db"
    ],
    "integration_tools": [
      "Dependabot",
      "GitHub Security Alerts",
      "GitHub Advanced Security",
      "OSV Scanner"
    ],
    "last_verified": "2025-08-15",
    "license": "CC-BY 4.0 for database content",
    "maintainer": "GitHub Security Team"
  },
  "name": "GitHub Advisory Database",
  "operational_guidance": {
    "best_practices": [
      "Use a free GitHub token for 80x higher rate limits",
      "Clone the advisory-database repo for offline access",
      "Use GraphQL for complex queries and bulk data",
      "Filter by ecosystem to reduce noise",
      "Monitor specific packages you use",
      "Integrate with Dependabot for automated PRs"
    ],
    "common_use_cases": [
      "Dependency vulnerability scanning",
      "Security audit automation",
      "CI/CD security gates",
      "Package vulnerability research",
      "Supply chain security monitoring",
      "Compliance reporting"
    ],
    "recommended_update_frequency": "Real-time via webhooks or hourly polling",
    "value_proposition": "Comprehensive vulnerability database with generous free tier and GraphQL support"
  },
  "quality_metrics": {
    "accessibility": "Public access, better with free GitHub account",
    "api_stability": "Stable v3 API with versioning",
    "completeness": "Comprehensive coverage of major ecosystems",
    "cost": "FREE with generous limits",
    "data_quality": "GitHub-verified and community-reviewed",
    "reliability": "excellent",
    "update_speed": "Real-time updates"
  },
  "quality_score": 90,
  "subcategory": "advisory",
  "url": "https://github.com/advisories"
}
