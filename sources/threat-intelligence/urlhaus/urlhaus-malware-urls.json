{
  "api": {
    "base_url": "https://urlhaus-api.abuse.ch/v1",
    "bulk_downloads": [
      {
        "description": "Complete URLhaus database",
        "format": "CSV",
        "name": "Full Database",
        "url": "https://urlhaus.abuse.ch/downloads/csv_recent/"
      },
      {
        "description": "URLs added in last 30 days",
        "format": "CSV",
        "name": "Recent URLs (30 days)",
        "url": "https://urlhaus.abuse.ch/downloads/csv_recent/"
      },
      {
        "description": "Currently online malicious URLs",
        "format": "CSV",
        "name": "Active URLs",
        "url": "https://urlhaus.abuse.ch/downloads/csv_online/"
      }
    ],
    "endpoints": [
      {
        "description": "Lookup URL information",
        "method": "POST",
        "name": "Query URL",
        "path": "/url/"
      },
      {
        "description": "Get URLs for a host",
        "method": "POST",
        "name": "Query Host",
        "path": "/host/"
      },
      {
        "description": "Lookup payload information",
        "method": "POST",
        "name": "Query Payload",
        "path": "/payload/"
      },
      {
        "description": "Get recent malicious URLs",
        "method": "GET",
        "name": "Recent URLs",
        "path": "/urls/recent/"
      }
    ],
    "rate_limits": {
      "api_limit": "100 requests per minute (no auth)",
      "authenticated": "1000 requests per minute with API key",
      "free_tier": "No authentication required for bulk downloads"
    },
    "type": "rest"
  },
  "authentication": {
    "notes": "COMPLETELY FREE! No authentication needed for bulk downloads. Optional API key for higher rate limits.",
    "required": false,
    "type": "none"
  },
  "authority": 86,
  "category": "threat-intelligence",
  "coverage": 89,
  "data_coverage": {
    "content_types": [
      "Malicious URLs",
      "Malware distribution sites",
      "Phishing URLs",
      "Command & Control servers",
      "Payload download URLs",
      "Exploit kit landing pages",
      "Malware families",
      "URL status (online/offline)"
    ],
    "malware_families": [
      "Emotet",
      "Trickbot",
      "QakBot",
      "IcedID",
      "Cobalt Strike",
      "AsyncRAT",
      "AgentTesla",
      "RedLine Stealer",
      "Formbook",
      "LokiBot",
      "NanoCore",
      "Remcos"
    ],
    "metadata_provided": [
      "URL",
      "URL status",
      "Date added",
      "Threat type",
      "Malware family",
      "Reporter",
      "Associated files",
      "Tags"
    ],
    "temporal": {
      "historical_data": "2018-present",
      "latency": "Near real-time",
      "update_frequency": "Real-time submissions"
    }
  },
  "description": "URLhaus by abuse.ch providing FREE real-time feed of malicious URLs used for malware distribution. Completely open threat intelligence with bulk downloads and API access.",
  "format": "csv",
  "id": "urlhaus-malware-urls",
  "integration_examples": {
    "bash": {
      "check_url": "#!/bin/bash\n# URLhaus URL Checker - FREE!\n\nURL=\"$1\"\n\necho \"\ud83d\udd0d URLhaus Malware URL Check (FREE!)\"\necho \"=====================================\"\n\ncurl -s -X POST https://urlhaus-api.abuse.ch/v1/url/ \\\n  -d \"url=$URL\" | jq '.'\n\necho \"\"\necho \"\ud83d\udce5 Download full database:\"\necho \"   wget https://urlhaus.abuse.ch/downloads/csv_recent/\""
    },
    "curl": {
      "check_domain": "# Check domain for malicious URLs\ncurl -X POST https://urlhaus-api.abuse.ch/v1/host/ -d \"host=example.com\"",
      "get_recent": "# Get recent malicious URLs - FREE!\ncurl -s https://urlhaus.abuse.ch/downloads/csv_recent/ | head -20"
    },
    "python": {
      "urlhaus_checker": "import requests\nimport csv\nimport json\nfrom datetime import datetime, timedelta\nimport hashlib\n\nclass URLhausChecker:\n    \"\"\"URLhaus Malware URL Checker - COMPLETELY FREE!\"\"\"\n    \n    def __init__(self):\n        self.api_url = 'https://urlhaus-api.abuse.ch/v1'\n        self.bulk_url = 'https://urlhaus.abuse.ch/downloads'\n        \n    def check_url(self, url):\n        \"\"\"Check if URL is malicious (FREE - no auth!)\"\"\"\n        print(f\"\ud83d\udd0d Checking URL: {url}\\n\")\n        \n        response = requests.post(\n            f'{self.api_url}/url/',\n            data={'url': url}\n        )\n        \n        if response.status_code == 200:\n            data = response.json()\n            \n            if data['query_status'] == 'ok':\n                print(\"\u26a0\ufe0f MALICIOUS URL DETECTED!\")\n                print(f\"   Status: {data.get('url_status', 'Unknown')}\")\n                print(f\"   Date Added: {data.get('date_added', 'Unknown')}\")\n                print(f\"   Threat: {data.get('threat', 'Unknown')}\")\n                \n                if 'payloads' in data:\n                    print(\"\\n\ud83d\udce6 Associated Payloads:\")\n                    for payload in data['payloads'][:3]:\n                        print(f\"   \u2022 {payload.get('filename', 'Unknown')}\")\n                        print(f\"     SHA256: {payload.get('sha256', 'N/A')}\")\n                        print(f\"     Type: {payload.get('file_type', 'Unknown')}\")\n            else:\n                print(\"\u2705 URL not found in URLhaus database\")\n            \n            return data\n        else:\n            print(f\"Error: {response.status_code}\")\n            return None\n    \n    def check_domain(self, domain):\n        \"\"\"Get all malicious URLs for a domain (FREE!)\"\"\"\n        print(f\"\ud83c\udf10 Checking Domain: {domain}\\n\")\n        \n        response = requests.post(\n            f'{self.api_url}/host/',\n            data={'host': domain}\n        )\n        \n        if response.status_code == 200:\n            data = response.json()\n            \n            if data['query_status'] == 'ok':\n                urls = data.get('urls', [])\n                print(f\"\u26a0\ufe0f Found {len(urls)} malicious URLs on this domain:\\n\")\n                \n                for url_data in urls[:10]:  # Show first 10\n                    print(f\"   \u2022 {url_data.get('url', 'Unknown')}\")\n                    print(f\"     Status: {url_data.get('url_status', 'Unknown')}\")\n                    print(f\"     Threat: {url_data.get('threat', 'Unknown')}\")\n                    print(f\"     Added: {url_data.get('date_added', 'Unknown')}\")\n                    print()\n            else:\n                print(\"\u2705 Domain not found in URLhaus\")\n            \n            return data\n        else:\n            print(f\"Error: {response.status_code}\")\n            return None\n    \n    def get_recent_urls(self, limit=100):\n        \"\"\"Get recent malicious URLs (FREE!)\"\"\"\n        print(f\"\ud83c\udd95 Recent Malicious URLs (FREE!)\\n\")\n        \n        # Download recent CSV\n        csv_url = 'https://urlhaus.abuse.ch/downloads/csv_recent/'\n        \n        response = requests.get(csv_url)\n        if response.status_code == 200:\n            # Parse CSV\n            lines = response.text.split('\\n')\n            \n            # Skip comments and header\n            data_lines = [l for l in lines if not l.startswith('#') and l.strip()]\n            \n            print(f\"\ud83d\udcca Recent Malicious URLs (showing {min(limit, 10)}):\\n\")\n            \n            # Parse and display\n            reader = csv.reader(data_lines[1:limit+1])  # Skip header\n            for row in list(reader)[:10]:\n                if len(row) >= 8:\n                    print(f\"   \u2022 URL: {row[2]}\")\n                    print(f\"     Status: {row[3]}\")\n                    print(f\"     Threat: {row[5]}\")\n                    print(f\"     Added: {row[1]}\")\n                    print()\n            \n            return True\n        else:\n            print(f\"Error downloading: {response.status_code}\")\n            return False\n    \n    def check_payload(self, file_hash):\n        \"\"\"Check if file hash is known malware (FREE!)\"\"\"\n        print(f\"\ud83d\udd0e Checking Payload: {file_hash}\\n\")\n        \n        # Determine hash type\n        hash_type = 'sha256' if len(file_hash) == 64 else 'md5'\n        \n        response = requests.post(\n            f'{self.api_url}/payload/',\n            data={hash_type: file_hash}\n        )\n        \n        if response.status_code == 200:\n            data = response.json()\n            \n            if data['query_status'] == 'ok':\n                print(\"\u26a0\ufe0f MALWARE DETECTED!\")\n                print(f\"   File Type: {data.get('file_type', 'Unknown')}\")\n                print(f\"   File Size: {data.get('file_size', 'Unknown')} bytes\")\n                print(f\"   First Seen: {data.get('firstseen', 'Unknown')}\")\n                print(f\"   Last Seen: {data.get('lastseen', 'Unknown')}\")\n                \n                if 'urls' in data:\n                    print(f\"\\n\ud83c\udf10 Distribution URLs ({len(data['urls'])} total):\")\n                    for url in data['urls'][:5]:\n                        print(f\"   \u2022 {url.get('url', 'Unknown')}\")\n                        print(f\"     Status: {url.get('url_status', 'Unknown')}\")\n            else:\n                print(\"\u2705 Hash not found in URLhaus\")\n            \n            return data\n        else:\n            print(f\"Error: {response.status_code}\")\n            return None\n    \n    def download_blocklist(self, format='domains'):\n        \"\"\"Download blocklists for firewall/DNS (FREE!)\"\"\"\n        print(f\"\ud83d\udce5 Downloading URLhaus Blocklist ({format})\\n\")\n        \n        blocklists = {\n            'domains': 'https://urlhaus.abuse.ch/downloads/hostfile/',\n            'urls': 'https://urlhaus.abuse.ch/downloads/csv_online/',\n            'ips': 'https://urlhaus.abuse.ch/downloads/ipblocklist/'\n        }\n        \n        if format in blocklists:\n            response = requests.get(blocklists[format])\n            \n            if response.status_code == 200:\n                # Count entries\n                lines = response.text.split('\\n')\n                entries = [l for l in lines if not l.startswith('#') and l.strip()]\n                \n                print(f\"\u2705 Downloaded {len(entries)} {format}\")\n                print(f\"\\n\ud83d\udcca Sample entries:\")\n                for entry in entries[:10]:\n                    print(f\"   \u2022 {entry}\")\n                \n                return response.text\n            else:\n                print(f\"Error: {response.status_code}\")\n                return None\n        else:\n            print(f\"Invalid format. Choose: {list(blocklists.keys())}\")\n            return None\n    \n    def threat_statistics(self):\n        \"\"\"Get URLhaus threat statistics (FREE!)\"\"\"\n        print(\"\ud83d\udcc8 URLhaus Threat Statistics (FREE!)\\n\")\n        \n        # Get recent threats for statistics\n        response = requests.get('https://urlhaus.abuse.ch/downloads/csv_recent/')\n        \n        if response.status_code == 200:\n            lines = response.text.split('\\n')\n            data_lines = [l for l in lines if not l.startswith('#') and l.strip()]\n            \n            # Parse threats\n            threats = {}\n            total = 0\n            \n            reader = csv.reader(data_lines[1:1000])  # Sample first 1000\n            for row in reader:\n                if len(row) >= 6:\n                    threat = row[5]  # Threat column\n                    threats[threat] = threats.get(threat, 0) + 1\n                    total += 1\n            \n            print(f\"\ud83d\udcca Threat Distribution (sample of {total}):\")\n            for threat, count in sorted(threats.items(), key=lambda x: x[1], reverse=True)[:10]:\n                percentage = (count / total) * 100\n                print(f\"   \u2022 {threat}: {count} ({percentage:.1f}%)\")\n            \n            print(\"\\n\ud83c\udfaf Key Features:\")\n            print(\"   \u2022 Real-time malware URL feed\")\n            print(\"   \u2022 No authentication required\")\n            print(\"   \u2022 Multiple download formats\")\n            print(\"   \u2022 API for lookups\")\n            print(\"   \u2022 Community-driven\")\n            \n            return threats\n        else:\n            print(f\"Error: {response.status_code}\")\n            return None\n\n# Usage\n# checker = URLhausChecker()\n# checker.check_url('http://malicious-site.com/payload.exe')\n# checker.get_recent_urls()\n# checker.download_blocklist('domains')"
    }
  },
  "last_updated": "2025-08-16T00:00:00.000Z",
  "metadata": {
    "alternatives": [
      "virustotal-url-scan",
      "phishtank",
      "openphish"
    ],
    "last_verified": "2025-08-16",
    "license": "CC0 - Public Domain",
    "maintainer": "abuse.ch",
    "related_resources": [
      "MalwareBazaar",
      "ThreatFox",
      "Feodo Tracker",
      "SSL Blacklist"
    ]
  },
  "name": "URLhaus Malware URL Feed",
  "operational_guidance": {
    "best_practices": [
      "Download daily blocklists",
      "Integrate with firewall/proxy",
      "Check URLs before access",
      "Monitor your domains",
      "Contribute malicious URLs",
      "Use for threat intel",
      "Automate blocklist updates"
    ],
    "common_use_cases": [
      "URL reputation checking",
      "Malware distribution tracking",
      "Firewall blocklist generation",
      "DNS sinkholing",
      "Threat hunting",
      "IOC enrichment",
      "Security monitoring",
      "Incident response"
    ],
    "recommended_update_frequency": "Daily blocklist updates, real-time API checks for critical URLs",
    "value_proposition": "Community-driven malware URL database with free bulk downloads and API access, no registration required"
  },
  "quality_metrics": {
    "accessibility": "Completely open, no auth required",
    "completeness": "Comprehensive malware URL coverage",
    "cost": "COMPLETELY FREE",
    "data_quality": "Community-validated malware URLs",
    "reliability": "excellent",
    "update_speed": "Real-time submissions"
  },
  "quality_score": 87,
  "subcategory": "urlhaus",
  "url": "https://urlhaus.abuse.ch/"
}
