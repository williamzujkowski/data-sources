{
  "api": {
    "base_url": "https://vuldb.com/api/v1",
    "endpoints": [
      {
        "description": "Get recent vulnerabilities",
        "method": "GET",
        "name": "Get Recent",
        "path": "/recent"
      },
      {
        "description": "Search vulnerabilities",
        "method": "POST",
        "name": "Search",
        "path": "/search"
      },
      {
        "description": "Get vulnerability by ID",
        "method": "GET",
        "name": "Get by ID",
        "path": "/id/{id}"
      },
      {
        "description": "Get vulnerability by CVE",
        "method": "GET",
        "name": "Get by CVE",
        "path": "/cve/{cve}"
      }
    ],
    "rate_limits": {
      "api_calls": "Limited daily API calls",
      "features": "Core vulnerability data access",
      "free_tier": "Free Community Edition with daily limits"
    },
    "type": "rest"
  },
  "authentication": {
    "notes": "FREE Community API key available! Register at vuldb.com for free tier with daily API access.",
    "required": true,
    "type": "api_key"
  },
  "authority": 91,
  "category": "vulnerability-research",
  "coverage": 92,
  "data_coverage": {
    "content_types": [
      "Vulnerability details",
      "CVE assignments",
      "CVSS scores (2.0, 3.0, 3.1)",
      "Exploit availability",
      "Exploit prices",
      "Countermeasures",
      "CTI indicators",
      "Threat intelligence"
    ],
    "temporal": {
      "historical_data": "1990-present",
      "latency": "Near real-time",
      "update_frequency": "Real-time updates"
    },
    "unique_features": [
      "Exploit price estimates",
      "0-day tracking",
      "Threat actor attribution",
      "Countermeasure recommendations",
      "Risk scoring",
      "Vulnerability trending",
      "Geographic distribution",
      "Industry impact analysis"
    ],
    "vulnerability_metadata": [
      "Vulnerability ID",
      "CVE ID",
      "Title and summary",
      "Affected products",
      "Vulnerability class",
      "CWE classification",
      "Attack vector",
      "Authentication requirements",
      "Confidentiality impact",
      "Integrity impact",
      "Availability impact"
    ]
  },
  "description": "VulDB Community Edition - FREE vulnerability database with API access. Comprehensive vulnerability intelligence with CVSS scoring, exploit prices, and CTI information.",
  "format": "json",
  "id": "vuldb-community",
  "integration_examples": {
    "bash": {
      "vuldb_check": "#!/bin/bash\n# VulDB Community Check - FREE!\n\nAPI_KEY=\"YOUR_FREE_API_KEY\"\nCVE=\"$1\"\n\necho \"\ud83d\udd0d VulDB Community Edition (FREE!)\"\necho \"===================================\"\necho \"\"\n\nif [ -z \"$CVE\" ]; then\n    echo \"\ud83d\udcca Getting recent vulnerabilities...\"\n    curl -s -H \"X-VulDB-ApiKey: $API_KEY\" \\\n        \"https://vuldb.com/api/v1/recent?recent=5\" | jq '.'\nelse\n    echo \"\ud83d\udd0e Checking CVE: $CVE\"\n    curl -s -H \"X-VulDB-ApiKey: $API_KEY\" \\\n        \"https://vuldb.com/api/v1/cve/$CVE\" | jq '.'\nfi\n\necho \"\"\necho \"\ud83c\udd93 Free Community Features:\"\necho \"   \u2022 API access with registration\"\necho \"   \u2022 Daily vulnerability updates\"\necho \"   \u2022 Exploit price information\"\necho \"   \u2022 CVSS scoring\"\necho \"   \u2022 Countermeasure recommendations\""
    },
    "curl": {
      "get_recent": "# Get recent vulns - FREE with API key!\ncurl -H \"X-VulDB-ApiKey: YOUR_API_KEY\" \\\n  \"https://vuldb.com/api/v1/recent?recent=5\""
    },
    "python": {
      "vuldb_client": "import requests\nimport json\nfrom datetime import datetime, timedelta\n\nclass VulDBClient:\n    \"\"\"VulDB Community Edition Client - FREE TIER!\"\"\"\n    \n    def __init__(self, api_key):\n        self.api_key = api_key\n        self.base_url = 'https://vuldb.com/api/v1'\n        self.headers = {\n            'X-VulDB-ApiKey': api_key,\n            'Accept': 'application/json'\n        }\n    \n    def get_recent_vulnerabilities(self, limit=10):\n        \"\"\"Get recent vulnerabilities (FREE!)\"\"\"\n        print(\"\ud83c\udd95 VulDB Recent Vulnerabilities (FREE Community Edition)\\n\")\n        \n        params = {\n            'recent': limit,\n            'fields': 'entry,vulnerability,cvss3,countermeasure'\n        }\n        \n        try:\n            response = requests.get(\n                f'{self.base_url}/recent',\n                headers=self.headers,\n                params=params\n            )\n            \n            if response.status_code == 200:\n                data = response.json()\n                vulns = data.get('result', [])\n                \n                print(f\"\ud83d\udcca Found {len(vulns)} recent vulnerabilities:\\n\")\n                \n                for vuln in vulns:\n                    entry = vuln.get('entry', {})\n                    vulnerability = vuln.get('vulnerability', {})\n                    cvss3 = vuln.get('cvss3', {})\n                    \n                    print(f\"   \ud83c\udfaf VulDB-{entry.get('id', 'N/A')}: {entry.get('title', 'N/A')}\")\n                    print(f\"      CVE: {vulnerability.get('cve', 'N/A')}\")\n                    print(f\"      CVSS 3.1: {cvss3.get('meta', {}).get('basescore', 'N/A')}\")\n                    print(f\"      Severity: {cvss3.get('meta', {}).get('baseseverity', 'N/A')}\")\n                    \n                    # Exploit info\n                    exploit = vuln.get('exploit', {})\n                    if exploit.get('availability'):\n                        print(f\"      \u26a0\ufe0f Exploit: {exploit.get('availability', 'Unknown')}\")\n                        print(f\"      \ud83d\udcb0 Price: ${exploit.get('price', 'N/A')}\") \n                    \n                    # Countermeasure\n                    countermeasure = vuln.get('countermeasure', {})\n                    if countermeasure.get('name'):\n                        print(f\"      \u2705 Fix: {countermeasure.get('name', 'N/A')}\")\n                    \n                    print(f\"      \ud83d\udd17 URL: https://vuldb.com/?id.{entry.get('id', '')}\")\n                    print()\n                \n                return vulns\n            else:\n                print(f\"Error: {response.status_code}\")\n                return []\n        except Exception as e:\n            print(f\"Error: {e}\")\n            return []\n    \n    def search_vulnerabilities(self, search_term):\n        \"\"\"Search vulnerabilities (FREE!)\"\"\"\n        print(f\"\ud83d\udd0d Searching VulDB for: {search_term}\\n\")\n        \n        data = {\n            'search': search_term,\n            'fields': 'entry,vulnerability,cvss3'\n        }\n        \n        try:\n            response = requests.post(\n                f'{self.base_url}/search',\n                headers=self.headers,\n                json=data\n            )\n            \n            if response.status_code == 200:\n                result = response.json()\n                vulns = result.get('result', [])\n                \n                print(f\"\ud83d\udcca Found {len(vulns)} vulnerabilities:\\n\")\n                \n                for vuln in vulns[:10]:\n                    entry = vuln.get('entry', {})\n                    vulnerability = vuln.get('vulnerability', {})\n                    \n                    print(f\"   \u2022 VulDB-{entry.get('id', 'N/A')}: {entry.get('title', 'N/A')}\")\n                    print(f\"     CVE: {vulnerability.get('cve', 'N/A')}\")\n                    print(f\"     Class: {vulnerability.get('class', 'N/A')}\")\n                    print(f\"     CWE: {vulnerability.get('cwe', 'N/A')}\")\n                    print()\n                \n                return vulns\n            else:\n                print(f\"Error: {response.status_code}\")\n                return []\n        except Exception as e:\n            print(f\"Error: {e}\")\n            return []\n    \n    def get_vulnerability_by_cve(self, cve):\n        \"\"\"Get vulnerability details by CVE (FREE!)\"\"\"\n        print(f\"\ud83d\udccb Getting details for {cve}\\n\")\n        \n        try:\n            response = requests.get(\n                f'{self.base_url}/cve/{cve}',\n                headers=self.headers\n            )\n            \n            if response.status_code == 200:\n                data = response.json()\n                result = data.get('result', [{}])[0]\n                \n                if result:\n                    entry = result.get('entry', {})\n                    vulnerability = result.get('vulnerability', {})\n                    cvss3 = result.get('cvss3', {})\n                    exploit = result.get('exploit', {})\n                    \n                    print(\"\ud83d\udd10 Vulnerability Details:\\n\")\n                    print(f\"Title: {entry.get('title', 'N/A')}\")\n                    print(f\"VulDB ID: {entry.get('id', 'N/A')}\")\n                    print(f\"CVE: {vulnerability.get('cve', 'N/A')}\")\n                    print(f\"CWE: {vulnerability.get('cwe', 'N/A')}\")\n                    \n                    print(\"\\n\ud83d\udcca CVSS 3.1 Scores:\")\n                    meta = cvss3.get('meta', {})\n                    print(f\"   Base Score: {meta.get('basescore', 'N/A')}\")\n                    print(f\"   Severity: {meta.get('baseseverity', 'N/A')}\")\n                    print(f\"   Exploitability: {meta.get('exploitscore', 'N/A')}\")\n                    print(f\"   Impact: {meta.get('impactscore', 'N/A')}\")\n                    \n                    if exploit.get('availability'):\n                        print(\"\\n\u26a0\ufe0f Exploit Information:\")\n                        print(f\"   Availability: {exploit.get('availability', 'N/A')}\")\n                        print(f\"   Price: ${exploit.get('price', 'N/A')}\")\n                        print(f\"   0-day: {exploit.get('0day', False)}\")\n                    \n                    # Countermeasure\n                    countermeasure = result.get('countermeasure', {})\n                    if countermeasure:\n                        print(\"\\n\u2705 Countermeasure:\")\n                        print(f\"   {countermeasure.get('name', 'N/A')}\")\n                        print(f\"   {countermeasure.get('description', 'N/A')}\")\n                    \n                    print(f\"\\n\ud83d\udd17 More info: https://vuldb.com/?id.{entry.get('id', '')}\")\n                    \n                    return result\n                else:\n                    print(\"CVE not found in VulDB\")\n                    return None\n            else:\n                print(f\"Error: {response.status_code}\")\n                return None\n        except Exception as e:\n            print(f\"Error: {e}\")\n            return None\n    \n    def get_trending_vulnerabilities(self):\n        \"\"\"Get trending vulnerabilities (FREE!)\"\"\"\n        print(\"\ud83d\udcc8 VulDB Trending Vulnerabilities (FREE!)\\n\")\n        \n        # Get high-severity recent vulnerabilities\n        params = {\n            'recent': 20,\n            'cvss3score': '7.0:10.0',\n            'fields': 'entry,vulnerability,cvss3,exploit'\n        }\n        \n        try:\n            response = requests.get(\n                f'{self.base_url}/recent',\n                headers=self.headers,\n                params=params\n            )\n            \n            if response.status_code == 200:\n                data = response.json()\n                vulns = data.get('result', [])\n                \n                print(f\"\ud83d\udd25 High-Severity Trending Vulnerabilities:\\n\")\n                \n                for vuln in vulns[:10]:\n                    entry = vuln.get('entry', {})\n                    cvss3 = vuln.get('cvss3', {})\n                    exploit = vuln.get('exploit', {})\n                    \n                    score = cvss3.get('meta', {}).get('basescore', 0)\n                    \n                    # Trending indicator\n                    if float(score) >= 9.0:\n                        indicator = \"\ud83d\udd34 CRITICAL\"\n                    elif float(score) >= 7.0:\n                        indicator = \"\ud83d\udfe0 HIGH\"\n                    else:\n                        indicator = \"\ud83d\udfe1 MEDIUM\"\n                    \n                    print(f\"   {indicator} VulDB-{entry.get('id', 'N/A')}\")\n                    print(f\"      {entry.get('title', 'N/A')[:60]}...\")\n                    print(f\"      CVSS: {score}\")\n                    \n                    if exploit.get('availability'):\n                        print(f\"      \u26a0\ufe0f EXPLOIT AVAILABLE\")\n                    \n                    print()\n                \n                return vulns\n            else:\n                print(f\"Error: {response.status_code}\")\n                return []\n        except Exception as e:\n            print(f\"Error: {e}\")\n            return []\n    \n    def vulnerability_statistics(self):\n        \"\"\"Get VulDB statistics (FREE!)\\n\"\"\"\n        print(\"\ud83d\udcca VulDB Community Edition Features (FREE!)\\n\")\n        \n        print(\"\ud83d\udcc8 Database Statistics:\")\n        stats = {\n            'Total Entries': '250,000+',\n            'CVE Coverage': '200,000+',\n            'Daily Updates': '100+',\n            'Exploit Prices': 'Included',\n            '0-day Tracking': 'Yes',\n            'CTI Integration': 'Available',\n            'API Access': 'FREE tier available'\n        }\n        \n        for stat, value in stats.items():\n            print(f\"   \u2022 {stat}: {value}\")\n        \n        print(\"\\n\ud83c\udfaf Unique Features:\")\n        features = [\n            \"Exploit price estimates\",\n            \"0-day vulnerability tracking\",\n            \"Threat actor attribution\",\n            \"Countermeasure recommendations\",\n            \"CVSS 2.0, 3.0, and 3.1 scoring\",\n            \"CWE classification\",\n            \"Risk trending analysis\",\n            \"Geographic impact data\",\n            \"Industry-specific alerts\",\n            \"CTI indicator correlation\"\n        ]\n        \n        for feature in features:\n            print(f\"   \u2022 {feature}\")\n        \n        print(\"\\n\ud83c\udd93 Community Edition Benefits:\")\n        benefits = [\n            \"Free API access\",\n            \"Daily vulnerability updates\",\n            \"Core vulnerability data\",\n            \"CVSS scoring\",\n            \"Exploit availability info\",\n            \"Basic search capabilities\",\n            \"CVE lookups\",\n            \"Recent vulnerabilities feed\"\n        ]\n        \n        for benefit in benefits:\n            print(f\"   \u2022 {benefit}\")\n        \n        return stats\n\n# Usage\n# client = VulDBClient('your_free_api_key')\n# client.get_recent_vulnerabilities()\n# client.search_vulnerabilities('apache')\n# client.get_vulnerability_by_cve('CVE-2024-1234')"
    }
  },
  "last_updated": "2025-08-16T00:00:00.000Z",
  "metadata": {
    "alternatives": [
      "nvd-nist",
      "cvedetails",
      "cve-mitre"
    ],
    "last_verified": "2025-08-16",
    "license": "Free Community Edition",
    "maintainer": "VulDB",
    "related_resources": [
      "CVE Database",
      "NVD",
      "MITRE",
      "CWE"
    ]
  },
  "name": "VulDB Community Edition",
  "operational_guidance": {
    "best_practices": [
      "Register for free API key",
      "Monitor high-severity vulnerabilities",
      "Track exploit availability",
      "Check countermeasures",
      "Use CVSS scores for prioritization",
      "Monitor 0-day vulnerabilities",
      "Integrate with security tools"
    ],
    "common_use_cases": [
      "Vulnerability monitoring",
      "Risk assessment",
      "Exploit tracking",
      "CVE research",
      "Threat intelligence",
      "Patch prioritization",
      "Security reporting",
      "Compliance tracking"
    ],
    "recommended_update_frequency": "Daily API checks for new vulnerabilities",
    "value_proposition": "Comprehensive vulnerability database with unique exploit pricing data and CTI integration, offering free Community Edition access"
  },
  "quality_metrics": {
    "accessibility": "Free Community Edition available",
    "completeness": "Extensive CVE coverage with enrichment",
    "cost": "FREE Community tier with registration",
    "data_quality": "Curated and verified vulnerability data",
    "reliability": "excellent",
    "update_speed": "Real-time updates"
  },
  "quality_score": 91,
  "subcategory": "vuldb",
  "url": "https://vuldb.com/"
}
