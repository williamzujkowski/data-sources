{
  "api": {
    "base_url": "https://packetstormsecurity.com",
    "endpoints": [
      {
        "description": "Browse latest security files",
        "method": "GET",
        "name": "Latest Files",
        "path": "/files/"
      },
      {
        "description": "Multiple RSS feeds by category",
        "method": "GET",
        "name": "RSS Feeds",
        "path": "/feeds/"
      },
      {
        "description": "Search all content",
        "method": "GET",
        "name": "Search",
        "path": "/search/"
      },
      {
        "description": "Browse by date",
        "method": "GET",
        "name": "Archives",
        "path": "/files/date/"
      }
    ],
    "rss_feeds": [
      {
        "description": "All new files feed",
        "name": "All Files",
        "url": "https://rss.packetstormsecurity.com/files/"
      },
      {
        "description": "Latest exploits",
        "name": "Exploits",
        "url": "https://rss.packetstormsecurity.com/files/tags/exploit/"
      },
      {
        "description": "Security advisories",
        "name": "Advisories",
        "url": "https://rss.packetstormsecurity.com/files/tags/advisory/"
      },
      {
        "description": "Security tools",
        "name": "Tools",
        "url": "https://rss.packetstormsecurity.com/files/tags/tool/"
      }
    ],
    "type": "web"
  },
  "authentication": {
    "notes": "COMPLETELY FREE! No registration or authentication required for all downloads and content.",
    "required": false,
    "type": "none"
  },
  "authority": 90,
  "category": "vulnerability-research",
  "coverage": 93,
  "data_coverage": {
    "content_types": [
      "Exploits and PoCs",
      "Security advisories",
      "Vulnerability reports",
      "Security tools",
      "0-day disclosures",
      "Whitepapers",
      "Shellcode",
      "Denial of service tools"
    ],
    "file_categories": [
      "Exploits",
      "Advisories and Vulnerabilities",
      "Security Tools",
      "Web Application Security",
      "Denial of Service",
      "Shellcode",
      "Sniffers",
      "Cryptography",
      "Wireless Security",
      "Defense",
      "Penetration Testing",
      "Forensics"
    ],
    "platforms_covered": [
      "Linux",
      "Windows",
      "macOS",
      "BSD",
      "Solaris",
      "AIX",
      "IRIX",
      "HP-UX",
      "Android",
      "iOS",
      "Embedded Systems"
    ],
    "temporal": {
      "historical_data": "1998-present",
      "latency": "Immediate publication",
      "update_frequency": "Multiple daily updates"
    }
  },
  "description": "Packet Storm Security providing FREE exploits, advisories, tools, and whitepapers. Global security resource with downloadable content and comprehensive vulnerability information.",
  "format": "other",
  "id": "packet-storm-security",
  "integration_examples": {
    "bash": {
      "download_latest": "#!/bin/bash\n# Packet Storm Latest Files - FREE!\n\necho \"\ud83d\udce6 Packet Storm Security (COMPLETELY FREE!)\"\necho \"==========================================\"\necho \"\"\n\n# Get latest files via RSS\necho \"\ud83c\udd95 Latest Security Files:\"\ncurl -s https://rss.packetstormsecurity.com/files/ | \\\n    grep -E '<title>|<link>' | \\\n    sed 's/<[^>]*>//g' | \\\n    head -20\n\necho \"\"\necho \"\ud83d\udd0d Search example:\"\necho \"   curl 'https://packetstormsecurity.com/search/?q=wordpress'\"\n\necho \"\"\necho \"\ud83d\udce5 Download file:\"\necho \"   wget https://packetstormsecurity.com/files/download/[file_id]/\"\n\necho \"\"\necho \"\ud83d\udce1 RSS Feeds:\"\necho \"   \u2022 All: https://rss.packetstormsecurity.com/files/\"\necho \"   \u2022 Exploits: https://rss.packetstormsecurity.com/files/tags/exploit/\"\necho \"   \u2022 Tools: https://rss.packetstormsecurity.com/files/tags/tool/\""
    },
    "curl": {
      "get_exploits": "# Get latest exploits - FREE!\ncurl -s https://rss.packetstormsecurity.com/files/tags/exploit/ | grep '<title>' | head -10"
    },
    "python": {
      "packetstorm_monitor": "import requests\nfrom bs4 import BeautifulSoup\nimport feedparser\nfrom datetime import datetime, timedelta\nimport re\n\nclass PacketStormMonitor:\n    \"\"\"Packet Storm Security Monitor - COMPLETELY FREE!\"\"\"\n    \n    def __init__(self):\n        self.base_url = 'https://packetstormsecurity.com'\n        self.rss_base = 'https://rss.packetstormsecurity.com'\n        \n    def get_latest_files(self, category='all', limit=20):\n        \"\"\"Get latest security files (FREE!)\"\"\"\n        print(f\"\ud83d\udce6 Packet Storm Latest Files ({category}) - FREE!\\n\")\n        \n        # RSS feeds by category\n        feeds = {\n            'all': f'{self.rss_base}/files/',\n            'exploits': f'{self.rss_base}/files/tags/exploit/',\n            'advisories': f'{self.rss_base}/files/tags/advisory/',\n            'tools': f'{self.rss_base}/files/tags/tool/',\n            'dos': f'{self.rss_base}/files/tags/dos/',\n            'shellcode': f'{self.rss_base}/files/tags/shellcode/'\n        }\n        \n        if category in feeds:\n            try:\n                feed = feedparser.parse(feeds[category])\n                \n                if feed.entries:\n                    print(f\"\ud83c\udd95 Latest {category.title()} Files:\\n\")\n                    \n                    for entry in feed.entries[:limit]:\n                        print(f\"   \ud83d\udcc4 {entry.title}\")\n                        print(f\"      Date: {entry.get('published', 'N/A')}\")\n                        print(f\"      Link: {entry.link}\")\n                        \n                        # Extract tags if available\n                        if hasattr(entry, 'tags'):\n                            tags = [tag.term for tag in entry.tags]\n                            print(f\"      Tags: {', '.join(tags)}\")\n                        \n                        if hasattr(entry, 'summary'):\n                            summary = entry.summary[:150] + '...' if len(entry.summary) > 150 else entry.summary\n                            # Clean HTML from summary\n                            summary = re.sub('<.*?>', '', summary)\n                            print(f\"      Summary: {summary}\")\n                        print()\n                    \n                    return feed.entries\n                else:\n                    print(\"No entries found\")\n                    return []\n            except Exception as e:\n                print(f\"Error fetching RSS: {e}\")\n                return []\n        else:\n            print(f\"Invalid category. Available: {list(feeds.keys())}\")\n            return []\n    \n    def search_content(self, search_term, file_type='all'):\n        \"\"\"Search Packet Storm content (FREE!)\"\"\"\n        print(f\"\ud83d\udd0d Searching Packet Storm for: {search_term}\\n\")\n        \n        # Construct search URL\n        search_url = f\"{self.base_url}/search/?q={search_term}\"\n        \n        try:\n            response = requests.get(search_url)\n            if response.status_code == 200:\n                soup = BeautifulSoup(response.text, 'html.parser')\n                \n                # Parse search results\n                results = soup.find_all('dl', class_='file')\n                \n                print(f\"\ud83d\udcca Found {len(results)} results:\\n\")\n                \n                for result in results[:10]:  # Show first 10\n                    # Extract title\n                    title_elem = result.find('dt')\n                    if title_elem:\n                        title = title_elem.get_text(strip=True)\n                        link = title_elem.find('a')\n                        url = self.base_url + link['href'] if link else 'N/A'\n                        \n                        print(f\"   \ud83c\udfaf {title}\")\n                        print(f\"      URL: {url}\")\n                    \n                    # Extract metadata\n                    dd_elem = result.find('dd')\n                    if dd_elem:\n                        desc = dd_elem.get_text(strip=True)[:200]\n                        print(f\"      Description: {desc}...\")\n                    \n                    # Extract tags\n                    tags = result.find_all('a', class_='tag')\n                    if tags:\n                        tag_list = [tag.get_text(strip=True) for tag in tags]\n                        print(f\"      Tags: {', '.join(tag_list)}\")\n                    print()\n                \n                return True\n            else:\n                print(f\"Error: {response.status_code}\")\n                return False\n        except Exception as e:\n            print(f\"Error searching: {e}\")\n            return False\n    \n    def get_advisories(self, days_back=7):\n        \"\"\"Get recent security advisories (FREE!)\"\"\"\n        print(f\"\u26a0\ufe0f Recent Security Advisories (Last {days_back} days) - FREE!\\n\")\n        \n        feed_url = f'{self.rss_base}/files/tags/advisory/'\n        \n        try:\n            feed = feedparser.parse(feed_url)\n            cutoff_date = datetime.now() - timedelta(days=days_back)\n            \n            recent_advisories = []\n            for entry in feed.entries:\n                # Parse date\n                pub_date = datetime(*entry.published_parsed[:6])\n                if pub_date >= cutoff_date:\n                    recent_advisories.append(entry)\n            \n            print(f\"\ud83d\udccb {len(recent_advisories)} Recent Advisories:\\n\")\n            \n            for advisory in recent_advisories[:15]:\n                print(f\"   \u26a0\ufe0f {advisory.title}\")\n                print(f\"      Date: {advisory.get('published', 'N/A')}\")\n                print(f\"      Link: {advisory.link}\")\n                print()\n            \n            return recent_advisories\n        except Exception as e:\n            print(f\"Error: {e}\")\n            return []\n    \n    def get_tools(self, category='all'):\n        \"\"\"Get security tools (FREE!)\"\"\"\n        print(f\"\ud83d\udee0\ufe0f Packet Storm Security Tools - FREE!\\n\")\n        \n        tool_categories = {\n            'scanners': 'Scanner tools',\n            'exploits': 'Exploitation frameworks',\n            'sniffers': 'Network sniffers',\n            'fuzzers': 'Fuzzing tools',\n            'crackers': 'Password crackers',\n            'defense': 'Defensive tools',\n            'forensics': 'Forensic tools',\n            'wireless': 'Wireless tools'\n        }\n        \n        feed_url = f'{self.rss_base}/files/tags/tool/'\n        \n        try:\n            feed = feedparser.parse(feed_url)\n            \n            if feed.entries:\n                print(f\"\ud83d\udd27 Latest Security Tools:\\n\")\n                \n                for entry in feed.entries[:15]:\n                    print(f\"   \u2022 {entry.title}\")\n                    print(f\"     Date: {entry.get('published', 'N/A')}\")\n                    print(f\"     Download: {entry.link}\")\n                    print()\n                \n                print(\"\ud83d\udcda Tool Categories:\")\n                for cat, desc in tool_categories.items():\n                    print(f\"   \u2022 {cat}: {desc}\")\n                \n                return feed.entries\n            else:\n                print(\"No tools found\")\n                return []\n        except Exception as e:\n            print(f\"Error: {e}\")\n            return []\n    \n    def download_file(self, file_id):\n        \"\"\"Download file from Packet Storm (FREE!)\"\"\"\n        print(f\"\ud83d\udce5 Downloading File ID: {file_id}\\n\")\n        \n        # Construct download URL\n        download_url = f\"{self.base_url}/files/download/{file_id}/\"\n        \n        try:\n            response = requests.get(download_url, allow_redirects=True)\n            \n            if response.status_code == 200:\n                # Determine filename from headers or URL\n                if 'Content-Disposition' in response.headers:\n                    filename = response.headers['Content-Disposition'].split('filename=')[-1].strip('\"')\n                else:\n                    filename = f\"packetstorm_{file_id}.txt\"\n                \n                # Save file\n                with open(filename, 'wb') as f:\n                    f.write(response.content)\n                \n                print(f\"\u2705 File saved as: {filename}\")\n                print(f\"   Size: {len(response.content)} bytes\")\n                \n                # Show preview if text\n                if response.headers.get('Content-Type', '').startswith('text'):\n                    print(f\"\\n\ud83d\udcc4 Preview:\")\n                    preview = response.text[:500]\n                    print(preview + \"...\" if len(response.text) > 500 else preview)\n                \n                return True\n            else:\n                print(f\"Error downloading: {response.status_code}\")\n                return False\n        except Exception as e:\n            print(f\"Error: {e}\")\n            return False\n    \n    def get_statistics(self):\n        \"\"\"Get Packet Storm statistics (FREE!)\"\"\"\n        print(\"\ud83d\udcca Packet Storm Security Statistics (FREE!)\\n\")\n        \n        print(\"\ud83d\udcc8 Content Statistics:\")\n        stats = {\n            'Total Files': '160,000+',\n            'Exploits': '40,000+',\n            'Advisories': '50,000+',\n            'Tools': '2,500+',\n            'Papers': '1,200+',\n            'Years Active': '25+ (since 1998)',\n            'Daily Updates': '10-50 files'\n        }\n        \n        for stat, value in stats.items():\n            print(f\"   \u2022 {stat}: {value}\")\n        \n        print(\"\\n\ud83c\udfaf Key Features:\")\n        features = [\n            \"No registration required\",\n            \"All content freely downloadable\",\n            \"RSS feeds for automation\",\n            \"Comprehensive search\",\n            \"Historical archives\",\n            \"Multiple file formats\",\n            \"Verified submissions\",\n            \"Global contributor network\"\n        ]\n        \n        for feature in features:\n            print(f\"   \u2022 {feature}\")\n        \n        print(\"\\n\ud83d\udcc1 Content Categories:\")\n        categories = [\n            \"Exploits & Vulnerabilities\",\n            \"Security Tools\",\n            \"Advisories & Bulletins\",\n            \"Whitepapers & Research\",\n            \"Shellcode & Payloads\",\n            \"Web Application Security\",\n            \"Denial of Service\",\n            \"Wireless Security\",\n            \"Cryptography\",\n            \"Forensics\"\n        ]\n        \n        for category in categories:\n            print(f\"   \u2022 {category}\")\n        \n        return stats\n    \n    def generate_report(self):\n        \"\"\"Generate comprehensive Packet Storm report\"\"\"\n        print(f\"\ud83d\udce6 Packet Storm Security Report (FREE!)\")\n        print(f\"Report Date: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}\\n\")\n        \n        print(\"=\" * 50)\n        print(\"\ud83c\udd95 LATEST FILES\")\n        print(\"=\" * 50)\n        self.get_latest_files('all', 5)\n        \n        print(\"=\" * 50)\n        print(\"\ud83c\udfaf LATEST EXPLOITS\")\n        print(\"=\" * 50)\n        self.get_latest_files('exploits', 5)\n        \n        print(\"=\" * 50)\n        print(\"\u26a0\ufe0f SECURITY ADVISORIES\")\n        print(\"=\" * 50)\n        self.get_advisories(7)\n        \n        print(\"=\" * 50)\n        print(\"\ud83d\udee0\ufe0f SECURITY TOOLS\")\n        print(\"=\" * 50)\n        self.get_tools()\n        \n        print(\"=\" * 50)\n        print(\"\ud83d\udcca STATISTICS\")\n        print(\"=\" * 50)\n        self.get_statistics()\n        \n        print(\"\\n=\" * 50)\n        print(\"\ud83d\udd17 QUICK LINKS\")\n        print(\"=\" * 50)\n        \n        print(\"\\n\ud83c\udf10 Important URLs:\")\n        print(f\"   \u2022 Homepage: {self.base_url}\")\n        print(f\"   \u2022 Latest Files: {self.base_url}/files/\")\n        print(f\"   \u2022 Search: {self.base_url}/search/\")\n        print(f\"   \u2022 RSS Feeds: {self.base_url}/feeds/\")\n        print(f\"   \u2022 Submit File: {self.base_url}/submit/\")\n        \n        return True\n\n# Usage\n# monitor = PacketStormMonitor()\n# monitor.generate_report()\n# monitor.search_content('apache')"
    }
  },
  "last_updated": "2025-08-16T00:00:00.000Z",
  "metadata": {
    "alternatives": [
      "exploit-database",
      "securityfocus",
      "seclists"
    ],
    "last_verified": "2025-08-16",
    "license": "Various per file",
    "maintainer": "Packet Storm Security",
    "related_resources": [
      "Security Focus",
      "Exploit-DB",
      "Full Disclosure",
      "BugTraq"
    ]
  },
  "name": "Packet Storm Security",
  "operational_guidance": {
    "best_practices": [
      "Monitor RSS feeds daily",
      "Search before researching",
      "Test in isolated environments",
      "Verify exploit applicability",
      "Check publication dates",
      "Read code before execution",
      "Archive important files locally"
    ],
    "common_use_cases": [
      "Exploit research",
      "Vulnerability tracking",
      "Security tool discovery",
      "Advisory monitoring",
      "Penetration testing",
      "Security research",
      "Threat intelligence",
      "Security training"
    ],
    "recommended_update_frequency": "Daily RSS feed monitoring",
    "value_proposition": "Long-running security resource with extensive archives of exploits, tools, and advisories - all freely accessible without registration"
  },
  "quality_metrics": {
    "accessibility": "No registration required",
    "completeness": "Comprehensive security file archive",
    "cost": "COMPLETELY FREE",
    "data_quality": "Community-submitted and reviewed",
    "reliability": "excellent",
    "update_speed": "Multiple daily updates"
  },
  "quality_score": 91,
  "subcategory": "packetstorm",
  "url": "https://packetstormsecurity.com/"
}
