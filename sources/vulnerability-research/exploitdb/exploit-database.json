{
  "api": {
    "base_url": "https://www.exploit-db.com",
    "bulk_downloads": [
      {
        "description": "Complete Exploit-DB archive",
        "format": "ZIP",
        "name": "Full Archive",
        "url": "https://github.com/offensive-security/exploitdb/archive/master.zip"
      },
      {
        "description": "All exploits in CSV format",
        "format": "CSV",
        "name": "CSV Export",
        "url": "https://www.exploit-db.com/files_exploits.csv"
      },
      {
        "description": "All shellcodes in CSV",
        "format": "CSV",
        "name": "Shellcodes CSV",
        "url": "https://www.exploit-db.com/files_shellcodes.csv"
      }
    ],
    "endpoints": [
      {
        "description": "Search exploit database",
        "method": "GET",
        "name": "Search Exploits",
        "path": "/search"
      },
      {
        "description": "Latest exploits RSS feed",
        "method": "GET",
        "name": "RSS Feed",
        "path": "/rss.xml"
      },
      {
        "description": "Complete database archive",
        "method": "GET",
        "name": "Download Archive",
        "path": "/archive.tar.bz2"
      }
    ],
    "github_repo": "https://github.com/offensive-security/exploitdb",
    "searchsploit_tool": {
      "description": "Command-line search tool for Exploit-DB",
      "installation": "apt install exploitdb",
      "usage": "searchsploit <search terms>"
    },
    "type": "web"
  },
  "authentication": {
    "notes": "COMPLETELY FREE! No authentication required. Full database available via GitHub and direct downloads.",
    "required": false,
    "type": "none"
  },
  "authority": 93,
  "category": "vulnerability-research",
  "coverage": 95,
  "data_coverage": {
    "content_types": [
      "Exploit code",
      "Proof of Concepts (PoCs)",
      "Shellcodes",
      "Security papers",
      "Google dorks",
      "Vulnerable applications",
      "0-day exploits (disclosed)",
      "Metasploit modules"
    ],
    "exploit_categories": [
      "Remote exploits",
      "Web application exploits",
      "Local exploits",
      "Privilege escalation",
      "Denial of Service",
      "SQL injection",
      "Cross-site scripting",
      "Buffer overflows"
    ],
    "platforms": [
      "Linux",
      "Windows",
      "macOS",
      "Unix",
      "BSD",
      "Solaris",
      "iOS",
      "Android",
      "Hardware",
      "Web Applications"
    ],
    "temporal": {
      "historical_data": "1996-present",
      "latency": "Immediate publication after verification",
      "update_frequency": "Daily new exploits"
    }
  },
  "description": "The Exploit Database by Offensive Security - FREE archive of public exploits and corresponding vulnerable software. Includes Shellcodes, Papers, and Google Hacking Database.",
  "format": "other",
  "id": "exploit-database",
  "integration_examples": {
    "bash": {
      "searchsploit_usage": "#!/bin/bash\n# Exploit-DB Search - FREE!\n\nSEARCH=\"$1\"\n\necho \"\ud83d\udd0d Exploit-DB Search (COMPLETELY FREE!)\"\necho \"=======================================\"\necho \"\"\n\n# Check if searchsploit is installed\nif command -v searchsploit &> /dev/null; then\n    echo \"\ud83d\udccb Searching for: $SEARCH\"\n    searchsploit \"$SEARCH\"\n    \n    echo \"\"\n    echo \"\ud83d\udcbe To copy exploit to current directory:\"\n    echo \"   searchsploit -m <exploit_id>\"\n    \n    echo \"\"\n    echo \"\ud83d\udcc4 To examine exploit:\"\n    echo \"   searchsploit -x <exploit_id>\"\nelse\n    echo \"\u26a0\ufe0f searchsploit not installed!\"\n    echo \"\"\n    echo \"\ud83d\udce5 Installation options:\"\n    echo \"   Debian/Ubuntu: sudo apt install exploitdb\"\n    echo \"   Manual: git clone https://github.com/offensive-security/exploitdb\"\n    echo \"\"\n    echo \"\ud83c\udf10 Or search online: https://www.exploit-db.com/search\"\nfi\n\necho \"\"\necho \"\ud83d\udcca Download full database:\"\necho \"   wget https://github.com/offensive-security/exploitdb/archive/master.zip\""
    },
    "curl": {
      "download_csv": "# Download all exploits CSV - FREE!\ncurl -O https://www.exploit-db.com/files_exploits.csv",
      "get_latest": "# Get latest exploits RSS\ncurl -s https://www.exploit-db.com/rss.xml | grep '<title>' | head -10"
    },
    "python": {
      "exploitdb_searcher": "import requests\nimport csv\nimport json\nimport subprocess\nfrom datetime import datetime\n\nclass ExploitDBSearcher:\n    \"\"\"Exploit-DB Searcher - COMPLETELY FREE!\"\"\"\n    \n    def __init__(self):\n        self.base_url = 'https://www.exploit-db.com'\n        self.csv_url = 'https://www.exploit-db.com/files_exploits.csv'\n        self.github_api = 'https://api.github.com/repos/offensive-security/exploitdb'\n        \n    def search_exploits_online(self, search_term, limit=20):\n        \"\"\"Search exploits online (FREE!)\"\"\"\n        print(f\"\ud83d\udd0d Searching Exploit-DB for: {search_term}\\n\")\n        \n        # Download and search CSV (more reliable than web scraping)\n        try:\n            response = requests.get(self.csv_url)\n            if response.status_code == 200:\n                # Parse CSV\n                lines = response.text.split('\\n')\n                reader = csv.DictReader(lines)\n                \n                results = []\n                for row in reader:\n                    if search_term.lower() in row.get('description', '').lower():\n                        results.append(row)\n                \n                print(f\"\ud83d\udcca Found {len(results)} exploits:\\n\")\n                \n                for exploit in results[:limit]:\n                    print(f\"   \ud83c\udfaf {exploit.get('description', 'N/A')}\")\n                    print(f\"      ID: {exploit.get('id', 'N/A')}\")\n                    print(f\"      Date: {exploit.get('date', 'N/A')}\")\n                    print(f\"      Platform: {exploit.get('platform', 'N/A')}\")\n                    print(f\"      Type: {exploit.get('type', 'N/A')}\")\n                    print(f\"      Author: {exploit.get('author', 'N/A')}\")\n                    print(f\"      URL: {self.base_url}/exploits/{exploit.get('id', '')}\")\n                    print()\n                \n                return results\n            else:\n                print(f\"Error downloading CSV: {response.status_code}\")\n                return []\n        except Exception as e:\n            print(f\"Error searching: {e}\")\n            return []\n    \n    def searchsploit_local(self, search_term):\n        \"\"\"Use searchsploit tool if installed (FREE!)\"\"\"\n        print(f\"\ud83d\udd27 Using searchsploit for: {search_term}\\n\")\n        \n        try:\n            # Check if searchsploit is installed\n            result = subprocess.run(\n                ['searchsploit', search_term],\n                capture_output=True,\n                text=True,\n                timeout=10\n            )\n            \n            if result.returncode == 0:\n                print(\"\ud83d\udccb Searchsploit Results:\\n\")\n                print(result.stdout)\n                \n                # Also get exploit paths\n                result_paths = subprocess.run(\n                    ['searchsploit', '-p', search_term],\n                    capture_output=True,\n                    text=True,\n                    timeout=10\n                )\n                \n                if result_paths.returncode == 0:\n                    print(\"\\n\ud83d\udcc2 Exploit Paths:\\n\")\n                    print(result_paths.stdout)\n            else:\n                print(\"\u26a0\ufe0f searchsploit not installed. Install with:\")\n                print(\"   sudo apt install exploitdb\")\n                print(\"   OR\")\n                print(\"   git clone https://github.com/offensive-security/exploitdb\")\n        except FileNotFoundError:\n            print(\"\u274c searchsploit not found. Install exploitdb package.\")\n        except Exception as e:\n            print(f\"Error: {e}\")\n    \n    def get_latest_exploits(self, count=10):\n        \"\"\"Get latest published exploits (FREE!)\"\"\"\n        print(f\"\ud83c\udd95 Latest Exploits from Exploit-DB (FREE!)\\n\")\n        \n        # Use RSS feed for latest\n        rss_url = f\"{self.base_url}/rss.xml\"\n        \n        try:\n            import feedparser\n            feed = feedparser.parse(rss_url)\n            \n            if feed.entries:\n                print(f\"\ud83d\udcf0 Latest {min(count, len(feed.entries))} Exploits:\\n\")\n                \n                for entry in feed.entries[:count]:\n                    print(f\"   \u2022 {entry.title}\")\n                    print(f\"     Date: {entry.get('published', 'N/A')}\")\n                    print(f\"     Link: {entry.link}\")\n                    if hasattr(entry, 'summary'):\n                        summary = entry.summary[:100] + '...' if len(entry.summary) > 100 else entry.summary\n                        print(f\"     Summary: {summary}\")\n                    print()\n                \n                return feed.entries\n            else:\n                print(\"No entries found in RSS feed\")\n                return []\n        except ImportError:\n            print(\"Install feedparser: pip install feedparser\")\n            return []\n        except Exception as e:\n            print(f\"Error fetching RSS: {e}\")\n            return []\n    \n    def get_google_dorks(self):\n        \"\"\"Get Google Hacking Database entries (FREE!)\"\"\"\n        print(\"\ud83d\udd0e Google Hacking Database (GHDB) - FREE!\\n\")\n        \n        ghdb_categories = [\n            \"Footholds\",\n            \"Files containing usernames\",\n            \"Sensitive Directories\",\n            \"Web Server Detection\",\n            \"Vulnerable Files\",\n            \"Vulnerable Servers\",\n            \"Error Messages\",\n            \"Files containing juicy info\",\n            \"Files containing passwords\",\n            \"Sensitive Online Shopping Info\"\n        ]\n        \n        print(\"\ud83d\udcda GHDB Categories:\")\n        for category in ghdb_categories:\n            print(f\"   \u2022 {category}\")\n        \n        print(\"\\n\ud83d\udca1 Example Google Dorks:\")\n        example_dorks = [\n            'intitle:\"index of\" passwd',\n            'filetype:sql \"MySQL dump\"',\n            'inurl:admin intitle:login',\n            'filetype:log username password',\n            'ext:sql intext:\"-- phpMyAdmin SQL Dump\"'\n        ]\n        \n        for dork in example_dorks:\n            print(f\"   \u2022 {dork}\")\n        \n        print(\"\\n\ud83d\udd17 Access GHDB: https://www.exploit-db.com/google-hacking-database\")\n        \n        return ghdb_categories\n    \n    def download_exploit(self, exploit_id):\n        \"\"\"Download specific exploit code (FREE!)\"\"\"\n        print(f\"\ud83d\udce5 Downloading Exploit ID: {exploit_id}\\n\")\n        \n        exploit_url = f\"{self.base_url}/download/{exploit_id}\"\n        \n        try:\n            response = requests.get(exploit_url)\n            if response.status_code == 200:\n                # Save exploit\n                filename = f\"exploit_{exploit_id}.txt\"\n                with open(filename, 'w') as f:\n                    f.write(response.text)\n                \n                print(f\"\u2705 Exploit saved to: {filename}\")\n                print(f\"\\n\ud83d\udcc4 Exploit Preview:\")\n                print(response.text[:500] + \"...\" if len(response.text) > 500 else response.text)\n                \n                return response.text\n            else:\n                print(f\"Error downloading: {response.status_code}\")\n                return None\n        except Exception as e:\n            print(f\"Error: {e}\")\n            return None\n    \n    def vulnerability_statistics(self):\n        \"\"\"Get Exploit-DB statistics (FREE!)\"\"\"\n        print(\"\ud83d\udcca Exploit-DB Statistics (FREE!)\\n\")\n        \n        try:\n            # Get repository stats from GitHub\n            response = requests.get(self.github_api)\n            if response.status_code == 200:\n                repo_data = response.json()\n                \n                print(\"\ud83d\udcc8 Repository Statistics:\")\n                print(f\"   \u2022 Stars: {repo_data.get('stargazers_count', 'N/A')}\")\n                print(f\"   \u2022 Forks: {repo_data.get('forks_count', 'N/A')}\")\n                print(f\"   \u2022 Watchers: {repo_data.get('watchers_count', 'N/A')}\")\n                print(f\"   \u2022 Size: {repo_data.get('size', 'N/A')} KB\")\n                print(f\"   \u2022 Updated: {repo_data.get('updated_at', 'N/A')}\")\n        except Exception as e:\n            print(f\"Error getting stats: {e}\")\n        \n        print(\"\\n\ud83c\udfaf Exploit-DB Features:\")\n        features = [\n            \"50,000+ exploits and PoCs\",\n            \"Verified and tested exploits\",\n            \"Searchsploit CLI tool\",\n            \"Google Hacking Database\",\n            \"Shellcode archive\",\n            \"Security papers\",\n            \"GitHub mirror\",\n            \"CSV/JSON exports\",\n            \"RSS feeds\",\n            \"No registration required\"\n        ]\n        \n        for feature in features:\n            print(f\"   \u2022 {feature}\")\n        \n        print(\"\\n\ud83d\udee0\ufe0f Integration Options:\")\n        print(\"   \u2022 Direct download: Git clone or ZIP\")\n        print(\"   \u2022 CLI tool: searchsploit\")\n        print(\"   \u2022 API: CSV/JSON exports\")\n        print(\"   \u2022 Automation: RSS feeds\")\n        print(\"   \u2022 Mirror: Local database\")\n        \n        return True\n\n# Usage\n# searcher = ExploitDBSearcher()\n# searcher.search_exploits_online('wordpress')\n# searcher.get_latest_exploits()\n# searcher.searchsploit_local('apache')"
    }
  },
  "last_updated": "2025-08-16T00:00:00.000Z",
  "metadata": {
    "alternatives": [
      "packet-storm",
      "securityfocus",
      "rapid7-vulnerabilities"
    ],
    "last_verified": "2025-08-16",
    "license": "GNU General Public License v2.0",
    "maintainer": "Offensive Security",
    "related_resources": [
      "Kali Linux",
      "Offensive Security Training",
      "Metasploit Framework",
      "VulnHub"
    ]
  },
  "name": "Exploit Database (Exploit-DB)",
  "operational_guidance": {
    "best_practices": [
      "Use searchsploit for offline searching",
      "Keep local mirror updated",
      "Test exploits in isolated environments",
      "Verify exploit compatibility",
      "Check publication date",
      "Read exploit code before running",
      "Follow responsible disclosure"
    ],
    "common_use_cases": [
      "Vulnerability research",
      "Penetration testing",
      "Security assessments",
      "Exploit development",
      "Patch verification",
      "Threat modeling",
      "Security training",
      "CTF competitions"
    ],
    "recommended_update_frequency": "Weekly sync with GitHub repository",
    "value_proposition": "World's largest public archive of exploits and vulnerabilities with free access to entire database and tools"
  },
  "quality_metrics": {
    "accessibility": "Completely open, no registration",
    "completeness": "Most comprehensive public exploit archive",
    "cost": "COMPLETELY FREE",
    "data_quality": "Verified and tested exploits",
    "reliability": "excellent",
    "update_speed": "Daily new submissions"
  },
  "quality_score": 94,
  "subcategory": "exploitdb",
  "url": "https://www.exploit-db.com/"
}
