[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "data-sources-manager"
version = "0.1.0"
description = "A centralized, version-controlled catalog of high-quality data feeds for LLM-based projects"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "William Zujkowski", email = "williamzujkowski@example.com"}
]
maintainers = [
    {name = "William Zujkowski", email = "williamzujkowski@example.com"}
]
keywords = [
    "data-sources",
    "vulnerability",
    "threat-intelligence",
    "security",
    "llm",
    "catalog"
]
classifiers = [
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Intended Audience :: Information Technology",
    "Topic :: Security",
    "Topic :: Software Development :: Libraries :: Python Modules",
    "License :: OSI Approved :: MIT License",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Operating System :: OS Independent",
]
requires-python = ">=3.8"
dependencies = [
    "requests>=2.28.0",
    "jsonschema>=4.17.0",
    "python-dateutil>=2.8.2",
    "tqdm>=4.64.0",
    "sqlitedict>=2.1.0",
    "python-dotenv>=1.0.0",
    "aiohttp>=3.8.0",
    "pybloom-live>=4.0.0",
    "mmh3>=3.0.0",
    "rapidfuzz>=3.0.0",
    "numpy>=1.21.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "hypothesis>=6.0.0",
    "black>=23.0.0",
    "isort>=5.12.0",
    "flake8>=6.0.0",
    "flake8-bugbear>=23.0.0",
    "flake8-comprehensions>=3.10.0",
    "flake8-docstrings>=1.7.0",
    "mypy>=1.0.0",
    "bandit>=1.7.0",
    "pre-commit>=3.0.0",
    "coverage>=7.0.0",
]
docs = [
    "mkdocs>=1.4.0",
    "mkdocs-material>=9.0.0",
    "pymdown-extensions>=9.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0",
    "hypothesis>=6.0.0",
]

[project.urls]
Homepage = "https://github.com/williamzujkowski/data-sources"
Documentation = "https://williamzujkowski.github.io/data-sources/"
Repository = "https://github.com/williamzujkowski/data-sources.git"
"Bug Tracker" = "https://github.com/williamzujkowski/data-sources/issues"
Changelog = "https://github.com/williamzujkowski/data-sources/blob/main/CHANGELOG.md"

[project.scripts]
data-sources-fetch = "tools.fetch_sources:main"
data-sources-score = "tools.score_sources:main"
data-sources-index = "tools.index_sources:main"
data-sources-validate = "tools.validate_sources:main"

# Black configuration
[tool.black]
line-length = 88
target-version = ["py38", "py39", "py310", "py311", "py312"]
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
line_length = 88
multi_line_output = 3
include_trailing_comma = true
force_grid_wrap = 0
use_parentheses = true
ensure_newline_before_comments = true
known_first_party = ["tools"]
known_third_party = [
    "requests",
    "jsonschema",
    "dateutil",
    "tqdm",
    "sqlitedict",
    "dotenv",
    "pytest",
    "hypothesis"
]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_optional = true
disallow_any_generics = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
no_implicit_reexport = true
strict_equality = true

[[tool.mypy.overrides]]
module = [
    "sqlitedict",
    "tqdm",
    "dateutil.*",
    "pybloom_live",
    "mmh3",
    "rapidfuzz",
]
ignore_missing_imports = true

# pytest configuration
[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--verbose",
    "--tb=short",
    "--strict-markers",
    "--cov=tools",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-fail-under=80",
]
markers = [
    "unit: Unit tests",
    "integration: Integration tests",
    "slow: Slow tests that may take longer to run",
    "network: Tests that require network access",
]
filterwarnings = [
    "ignore::DeprecationWarning",
    "ignore::PendingDeprecationWarning",
]

# Coverage configuration
[tool.coverage.run]
source = ["tools"]
branch = true
omit = [
    "*/tests/*",
    "*/test_*",
    "*/__pycache__/*",
    "*/.*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]
show_missing = true
precision = 2

[tool.coverage.html]
directory = "htmlcov"

# Bandit configuration (security linting)
[tool.bandit]
exclude_dirs = ["tests", "htmlcov", ".pytest_cache"]
skips = ["B101"]  # Skip assert_used test

# setuptools configuration
[tool.setuptools.packages.find]
where = ["."]
include = ["tools*"]
exclude = ["tests*"]

[tool.setuptools.package-data]
"*" = ["*.json", "*.yml", "*.yaml", "*.md", "*.txt"]
